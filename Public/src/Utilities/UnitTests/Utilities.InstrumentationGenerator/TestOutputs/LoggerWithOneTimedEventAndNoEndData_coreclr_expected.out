// Copyright (c) Microsoft Corporation. All rights reserved.

// *****************************************************************************
// <auto-generated>
//     
//     This code was generated by Domino.Utilities.CodeGenerationHelper.dll version 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// *****************************************************************************

namespace Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::Domino.Utilities.Instrumentation.Common;
    
    /// <summary>
    /// Contains various types of severities.
    /// </summary>
    public enum SeverityType
    {
        /// <summary/>
        Unknown,
        /// <summary/>
        Info,
        /// <summary/>
        Error,
        /// <summary/>
        Debug,
        /// <summary/>
        Diagnostic,
        /// <summary/>
        Fatal,
        /// <summary/>
        Warning,
    }
    
    /// <summary>
    /// Logger class that contains methods for logging each event.
    /// </summary>
    [GeneratedCode("Domino.Utilities.InstrumentationGenerator","1.0")]
    public class LoggerWithOneTimedEventAndNoEndData
    {
        private static string MachineName = Environment.MachineName;
        
        private static bool s_staticStateCleaned = false;
        private static object s_staticCleanupLock = new object();
        
        /// <summary>
        /// Logs start of event Event1
        /// </summary>
        /// <param name="dataType1">Specific information about Event1.</param>
        /// <param name="loggingContext">The execution context when Event1 is fired.</param>
        /// <returns>The event start context which will be used when calling end method on Event1.</returns>
        public static StartContext LogEvent1Start(DataType1 dataType1, LoggingContext loggingContext)
        {
            var basicEventData = new BasicEventData(Guid.NewGuid(), "Event1", new []{SeverityType.Diagnostic}, DateTime.UtcNow, MachineName);
            string dataTypeString = "Event1 fired";
            ConsoleLogger.Log.Event1Start(basicEventData, loggingContext, dataType1, dataTypeString);
            return new StartContext(basicEventData.EventId, basicEventData.EventName, basicEventData.Timestamp, loggingContext.EnableRemoteInstrumentation);
        }
        
        /// <summary>
        /// Logs the end of Event1
        /// </summary>
        /// <param name="startContext">Information about the event start.</param>
        public static void LogEvent1End(StartContext startContext)
        {
            var time = DateTime.UtcNow;
            ConsoleLogger.Log.Event1End(startContext, time);
        }
        
        /// <summary>
        /// Performs any necessary static cleanup, such as ensuring all logs to remote systems are flushed
        /// </summary>
        public static void CleanupStaticState()
        {
            if (!s_staticStateCleaned)
            {
                lock (s_staticCleanupLock)
                {
                    if (!s_staticStateCleaned)
                    {
                        s_staticStateCleaned = true;
                    }
                }
            }
        }
    }
}
