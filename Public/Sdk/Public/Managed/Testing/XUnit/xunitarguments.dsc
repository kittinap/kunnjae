// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// This file should not contain any import other than from "Sdk.Transformers" because the functionalities
// in this file will be used for running tests outside of Domino selfhost.
import {Artifact, Cmd, Tool, Transformer} from "Sdk.Transformers";

/**
 * Command line arguments that are required for running xunit.console.
 */
@@public
export interface ConsoleArguments {
    /** Set of parallelization based on otion. */
    parallel?: "none" | "collections" | "assemblies" | "all";

    /** Maximum thread count for collection/assembly parallelization (0 - unbounded; >0 - limit to that number) */
    maxThreads?: number;

    /** If true, then a test directory is added as an untracked directory. Needed for running redis server. */
    untrackTestDirectory?: boolean;
    
    //-----------------------------------------------------------------------------
    //  Misc options
    //-----------------------------------------------------------------------------

    /** Do not show the copyright message. */
    noLogo?: boolean;

    /** Do not shadow copy assemblies. */
    noShadow?: boolean;

    /** Forces TeamCity mode (normally auto-detected). */
    teamCity?: boolean;

    /** Forces AppVeyor CI mode (normally auto-detected). */
    appVeyor?: boolean;

    /** Indicates whether app domains should be used to run test code. */
    useAppDomains?: boolean;

    /** Do not show progress messages. */
    quiet?: boolean;

    /** Show all progress messages. */
    verbose?: boolean;

    /** Wait for input after completion. */
    wait?: boolean;

    /** Launch the debugger to debug the tests. */
    debug?: boolean;

    /** Serialize all test cases (for diagnostic purposes only). */
    serialize?: boolean;

    //-----------------------------------------------------------------------------
    //  Options for filtering
    //-----------------------------------------------------------------------------

    /** Only run tests with matching name/value traits if specified more than once, acts as an OR operation. */
    traits?: NameValuePair[];

    /** Do not run tests with matching name/value traits. If specified more than once, acts as AND operation. */
    noTraits?: NameValuePair[];

    /** Run a given test method (should be fully specified; i.e., 'MyNamespace.MyClass.MyTestMethod'). */
    method?: string;

    /** Run all methods in a given test calss (should be fully specified; i.e., 'MyNamespace.MyClass'). */
    className?: string;

    //-----------------------------------------------------------------------------
    //  Options for reporting
    //-----------------------------------------------------------------------------

    /** Filename where an HTML report will be generated after run. No HTML generated by default. */
    htmlFile?: Path;

    /** Filename where an XML report (in NUnit format) will be generated after run. */
    nunitFile?: Path;

    /** Filename where an XML report (in xUnit.net v2 format) will be generated after run. */
    xmlFile?: Path;

    /** Filename where an XML report (in xUnit.net v1 format) will be generated after run. */
    xmlV1File?: Path;
}

@@public
export interface EnvironmentInformation {
    runtimeSearchDirectories?: Path[];
    variables?: Map<string, Transformer.EnvironmentValueType>;
}

/**
 * Pair of assembly and config files that could be used as an additional arguments to the xunit.console runner.
 */
interface AssemblyWithConfig {
    assemblyFile: File;
    configFile?: File;
}

/**
 * Simple name-value pair interface used for filtering traits.
 */
@@public
export interface NameValuePair {
    name: string;
    value: string;
}

/**
 * Results of the xUnit test runner.
 */
@@public
export interface Result {
    xmlFile?: DerivedFile;
    xmlV1File?: DerivedFile;
    nunitFile?: DerivedFile;
    htmlFile?: DerivedFile;
}

@@public
export function CreateCommandLineArgument(testAssembly: File, args: ConsoleArguments, classNameOverride?: string, methodOverride?: string) : Argument[] {
    return [
        Cmd.argument(Artifact.input(testAssembly)),
        Cmd.option("-parallel ",   args.parallel && args.parallel.toString()),
        Cmd.option("-maxthreads ", args.maxThreads),

        Cmd.flag("-nologo",      args.noLogo),
        Cmd.flag("-noshadow",    args.noShadow),
        Cmd.flag("-noappdomain", args.useAppDomains === false),
        Cmd.flag("-teamcity",    args.teamCity),
        Cmd.flag("-appveyor",    args.appVeyor),
        Cmd.flag("-quiet",       args.quiet),
        Cmd.flag("-verbose",     args.verbose),
        Cmd.flag("-wait",        args.wait),
        Cmd.flag("-debug",       args.debug),
        Cmd.flag("-serialize",   args.serialize),

        Cmd.options("-trait ",   (args.traits || []).map(t => t.name + "=" + t.value)),
        Cmd.options("-notrait ", (args.noTraits || []).map(t => t.name + "=" + t.value)),

        Cmd.option("-method ",  methodOverride || args.method),
        Cmd.option("-class ",   classNameOverride || args.className),

        Cmd.option("-xmlV1 ",   Artifact.output(args.xmlV1File)),
        Cmd.option("-xml ",     Artifact.output(args.xmlFile)),
        Cmd.option("-html ",    Artifact.output(args.htmlFile)),
        Cmd.option("-nunit ",   Artifact.output(args.nunitFile)),
    ];
}