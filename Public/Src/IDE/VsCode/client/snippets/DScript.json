{
    "Runner": {
        "prefix": "runner",
        "body": [
            "import {Artifact, Cmd, Tool, Transformer} from \"Sdk.Transformers\";",
            "",
            "namespace ${1:runnerName} {",
            "    /** ${2:argumentsDescription} */",
            "    @@public",
            "    export interface Arguments extends Transformer.RunnerArguments {",
            "        /**",
            "         * TODO: fill out the arguments section",
            "         * This section of the runner contains all of the arguments passed",
            "         * to the runner.",
            "         */",
            "    }",
            "",
            "    const defaultArgs: Arguments = {",
            "        /**",
            "         * TODO: fill out the default arguments section",
            "         * This section of the runner defines the default values for the",
            "         * optional values of your Arguments interface.",
            "         */",
            "    };",
            "",
            "    const tool: Transformer.ToolDefinition = {",
            "        /**",
            "         * TODO: fill out the tool definition section",
            "         * This section of the runner contains the default location of your",
            "         * tool. You probably want to import a module that contains the location",
            "         * of your tool",
            "         */",
            "        exe: Contract.fail(\"TODO: replace me\")",
            "    };",
            "",
            "    /** ${3:resultDescription} */",
            "    @@public",
            "    export interface Result {",
            "        /**",
            "         * TODO: fill out the result section",
            "         * This section of the runner contains the return object for your runner",
            "         * Set parameters that you want to return from your runner.",
            "         */",
            "    }",
            "",
            "    /**",
            "     * ${4:functionDescription}",
            "     * @param args - ${5:argsDescription}",
            "     * @returns ${6:returnsDescription}",
            "     */",
            "    @@public",
            "    export function ${7:functionName}(args: Arguments): Result {",
            "        args = defaultArgs.merge(args);",
            "",
            "        /**",
            "         * TODO: fill out the function section",
            "         * This section of the runner contains your runner code",
            "         * Please refer to the runner documentation on guidance on",
            "         * how to make a runner",
            "         */",
            "",
            "        let result = Transformer.evaluate({",
            "            tool: args.tool || tool,",
            "            tags: args.tags,",
            "            description: args.description,",
            "        });",
            "",
            "        return <Result>{",
            "            /**",
            "             * TODO: compose your results",
            "             * ex. file: result.getOutputFile(...)",
            "             */",
            "        };",
            "    }",
            "}"
        ],
        "description": "Inserts a DScript runner"
    }
}