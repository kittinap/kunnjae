// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace TypeScript.Net.Diagnostics
{
    /// <summary>
    /// Class that contains all existing diagnostics related to parsing/scanning DScript code.
    /// </summary>
    public static class Errors
    {
#pragma warning disable SA1310 // Field names must not contain underscore
#pragma warning disable SA1307 // Field name must begin with upper-case letter
#pragma warning disable SA1600 // Elements must be documented
#pragma warning disable CS1591 // Elements must be documented
        // This is a DScript specific error that was intentionally moved from the linter for performance purposes
        public static readonly IDiagnosticMessage Semicolon_expected = new DiagnosticMessage { Code = 1001, Category = DiagnosticCategory.Error, Key = "Semicolon_expected_1001", Message = "Missing semicolon at the end of the statement. Semicolons are required in DScript." };
        public static readonly IDiagnosticMessage Unterminated_string_literal = new DiagnosticMessage { Code = 1002, Category = DiagnosticCategory.Error, Key = "Unterminated_string_literal_1002", Message = "Unterminated string literal." };
        public static readonly IDiagnosticMessage Identifier_expected = new DiagnosticMessage { Code = 1003, Category = DiagnosticCategory.Error, Key = "Identifier_expected_1003", Message = "Identifier expected." };
        public static readonly IDiagnosticMessage Token_expected = new DiagnosticMessage { Code = 1005, Category = DiagnosticCategory.Error, Key = "_0_expected_1005", Message = "'{0}' expected." };
        public static readonly IDiagnosticMessage A_file_cannot_have_a_reference_to_itself = new DiagnosticMessage { Code = 1006, Category = DiagnosticCategory.Error, Key = "A_file_cannot_have_a_reference_to_itself_1006", Message = "A file cannot have a reference to itself." };
        public static readonly IDiagnosticMessage Trailing_comma_not_allowed = new DiagnosticMessage { Code = 1009, Category = DiagnosticCategory.Error, Key = "Trailing_comma_not_allowed_1009", Message = "Trailing comma not allowed." };
        public static readonly IDiagnosticMessage Asterisk_Slash_expected = new DiagnosticMessage { Code = 1010, Category = DiagnosticCategory.Error, Key = "Asterisk_Slash_expected_1010", Message = "'*/' expected." };
        public static readonly IDiagnosticMessage Unexpected_token = new DiagnosticMessage { Code = 1012, Category = DiagnosticCategory.Error, Key = "Unexpected_token_1012", Message = "Unexpected token." };
        public static readonly IDiagnosticMessage A_rest_parameter_must_be_last_in_a_parameter_list = new DiagnosticMessage { Code = 1014, Category = DiagnosticCategory.Error, Key = "A_rest_parameter_must_be_last_in_a_parameter_list_1014", Message = "A rest parameter must be last in a parameter list." };
        public static readonly IDiagnosticMessage Parameter_cannot_have_question_mark_and_initializer = new DiagnosticMessage { Code = 1015, Category = DiagnosticCategory.Error, Key = "Parameter_cannot_have_question_mark_and_initializer_1015", Message = "Parameter cannot have question mark and initializer." };
        public static readonly IDiagnosticMessage A_required_parameter_cannot_follow_an_optional_parameter = new DiagnosticMessage { Code = 1016, Category = DiagnosticCategory.Error, Key = "A_required_parameter_cannot_follow_an_optional_parameter_1016", Message = "A required parameter cannot follow an optional parameter." };
        public static readonly IDiagnosticMessage An_index_signature_cannot_have_a_rest_parameter = new DiagnosticMessage { Code = 1017, Category = DiagnosticCategory.Error, Key = "An_index_signature_cannot_have_a_rest_parameter_1017", Message = "An index signature cannot have a rest parameter." };
        public static readonly IDiagnosticMessage An_index_signature_parameter_cannot_have_an_accessibility_modifier = new DiagnosticMessage { Code = 1018, Category = DiagnosticCategory.Error, Key = "An_index_signature_parameter_cannot_have_an_accessibility_modifier_1018", Message = "An index signature parameter cannot have an accessibility modifier." };
        public static readonly IDiagnosticMessage An_index_signature_parameter_cannot_have_a_question_mark = new DiagnosticMessage { Code = 1019, Category = DiagnosticCategory.Error, Key = "An_index_signature_parameter_cannot_have_a_question_mark_1019", Message = "An index signature parameter cannot have a question mark." };
        public static readonly IDiagnosticMessage An_index_signature_parameter_cannot_have_an_initializer = new DiagnosticMessage { Code = 1020, Category = DiagnosticCategory.Error, Key = "An_index_signature_parameter_cannot_have_an_initializer_1020", Message = "An index signature parameter cannot have an initializer." };
        public static readonly IDiagnosticMessage An_index_signature_must_have_a_type_annotation = new DiagnosticMessage { Code = 1021, Category = DiagnosticCategory.Error, Key = "An_index_signature_must_have_a_type_annotation_1021", Message = "An index signature must have a type annotation." };
        public static readonly IDiagnosticMessage An_index_signature_parameter_must_have_a_type_annotation = new DiagnosticMessage { Code = 1022, Category = DiagnosticCategory.Error, Key = "An_index_signature_parameter_must_have_a_type_annotation_1022", Message = "An index signature parameter must have a type annotation." };
        public static readonly IDiagnosticMessage An_index_signature_parameter_type_must_be_string_or_number = new DiagnosticMessage { Code = 1023, Category = DiagnosticCategory.Error, Key = "An_index_signature_parameter_type_must_be_string_or_number_1023", Message = "An index signature parameter type must be 'string' or 'number'." };
        public static readonly IDiagnosticMessage Accessibility_modifier_already_seen = new DiagnosticMessage { Code = 1028, Category = DiagnosticCategory.Error, Key = "Accessibility_modifier_already_seen_1028", Message = "Accessibility modifier already seen." };
        public static readonly IDiagnosticMessage Modifier0_must_precede_modifier1 = new DiagnosticMessage { Code = 1029, Category = DiagnosticCategory.Error, Key = "_0_modifier_must_precede_1_modifier_1029", Message = "'{0}' modifier must precede '{1}' modifier." };
        public static readonly IDiagnosticMessage Modifier0_already_seen = new DiagnosticMessage { Code = 1030, Category = DiagnosticCategory.Error, Key = "_0_modifier_already_seen_1030", Message = "'{0}' modifier already seen." };
        public static readonly IDiagnosticMessage Modifier0_cannot_appear_on_a_class_element = new DiagnosticMessage { Code = 1031, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_appear_on_a_class_element_1031", Message = "'{0}' modifier cannot appear on a class element." };
        public static readonly IDiagnosticMessage Super_must_be_followed_by_an_argument_list_or_member_access = new DiagnosticMessage { Code = 1034, Category = DiagnosticCategory.Error, Key = "super_must_be_followed_by_an_argument_list_or_member_access_1034", Message = "'super' must be followed by an argument list or member access." };
        public static readonly IDiagnosticMessage Only_ambient_modules_can_use_quoted_names = new DiagnosticMessage { Code = 1035, Category = DiagnosticCategory.Error, Key = "Only_ambient_modules_can_use_quoted_names_1035", Message = "Only ambient modules can use quoted names." };
        public static readonly IDiagnosticMessage Statements_are_not_allowed_in_ambient_contexts = new DiagnosticMessage { Code = 1036, Category = DiagnosticCategory.Error, Key = "Statements_are_not_allowed_in_ambient_contexts_1036", Message = "Statements are not allowed in ambient contexts." };
        public static readonly IDiagnosticMessage A_declare_modifier_cannot_be_used_in_an_already_ambient_context = new DiagnosticMessage { Code = 1038, Category = DiagnosticCategory.Error, Key = "A_declare_modifier_cannot_be_used_in_an_already_ambient_context_1038", Message = "A 'declare' modifier cannot be used in an already ambient context." };
        public static readonly IDiagnosticMessage Initializers_are_not_allowed_in_ambient_contexts = new DiagnosticMessage { Code = 1039, Category = DiagnosticCategory.Error, Key = "Initializers_are_not_allowed_in_ambient_contexts_1039", Message = "Initializers are not allowed in ambient contexts." };
        public static readonly IDiagnosticMessage Modifier0_cannot_be_used_in_an_ambient_context = new DiagnosticMessage { Code = 1040, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_be_used_in_an_ambient_context_1040", Message = "'{0}' modifier cannot be used in an ambient context." };
        public static readonly IDiagnosticMessage Modifier0_cannot_be_used_with_a_class_declaration = new DiagnosticMessage { Code = 1041, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_be_used_with_a_class_declaration_1041", Message = "'{0}' modifier cannot be used with a class declaration." };
        public static readonly IDiagnosticMessage Modifier0_cannot_be_used_here = new DiagnosticMessage { Code = 1042, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_be_used_here_1042", Message = "'{0}' modifier cannot be used here." };
        public static readonly IDiagnosticMessage Modifier0_cannot_appear_on_a_data_property = new DiagnosticMessage { Code = 1043, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_appear_on_a_data_property_1043", Message = "'{0}' modifier cannot appear on a data property." };
        public static readonly IDiagnosticMessage Modifier0_cannot_appear_on_a_module_element = new DiagnosticMessage { Code = 1044, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_appear_on_a_module_element_1044", Message = "'{0}' modifier cannot appear on a module element." };
        public static readonly IDiagnosticMessage A_0_modifier_cannot_be_used_with_an_interface_declaration = new DiagnosticMessage { Code = 1045, Category = DiagnosticCategory.Error, Key = "A_0_modifier_cannot_be_used_with_an_interface_declaration_1045", Message = "A '{0}' modifier cannot be used with an interface declaration." };
        public static readonly IDiagnosticMessage A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file = new DiagnosticMessage { Code = 1046, Category = DiagnosticCategory.Error, Key = "A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file_1046", Message = "A 'declare' modifier is required for a top level declaration in a .d.ts file." };
        public static readonly IDiagnosticMessage A_rest_parameter_cannot_be_optional = new DiagnosticMessage { Code = 1047, Category = DiagnosticCategory.Error, Key = "A_rest_parameter_cannot_be_optional_1047", Message = "A rest parameter cannot be optional." };
        public static readonly IDiagnosticMessage A_rest_parameter_cannot_have_an_initializer = new DiagnosticMessage { Code = 1048, Category = DiagnosticCategory.Error, Key = "A_rest_parameter_cannot_have_an_initializer_1048", Message = "A rest parameter cannot have an initializer." };
        public static readonly IDiagnosticMessage A_set_accessor_must_have_exactly_one_parameter = new DiagnosticMessage { Code = 1049, Category = DiagnosticCategory.Error, Key = "A_set_accessor_must_have_exactly_one_parameter_1049", Message = "A 'set' accessor must have exactly one parameter." };
        public static readonly IDiagnosticMessage A_set_accessor_cannot_have_an_optional_parameter = new DiagnosticMessage { Code = 1051, Category = DiagnosticCategory.Error, Key = "A_set_accessor_cannot_have_an_optional_parameter_1051", Message = "A 'set' accessor cannot have an optional parameter." };
        public static readonly IDiagnosticMessage A_set_accessor_parameter_cannot_have_an_initializer = new DiagnosticMessage { Code = 1052, Category = DiagnosticCategory.Error, Key = "A_set_accessor_parameter_cannot_have_an_initializer_1052", Message = "A 'set' accessor parameter cannot have an initializer." };
        public static readonly IDiagnosticMessage A_set_accessor_cannot_have_rest_parameter = new DiagnosticMessage { Code = 1053, Category = DiagnosticCategory.Error, Key = "A_set_accessor_cannot_have_rest_parameter_1053", Message = "A 'set' accessor cannot have rest parameter." };
        public static readonly IDiagnosticMessage A_get_accessor_cannot_have_parameters = new DiagnosticMessage { Code = 1054, Category = DiagnosticCategory.Error, Key = "A_get_accessor_cannot_have_parameters_1054", Message = "A 'get' accessor cannot have parameters." };
        public static readonly IDiagnosticMessage Type_0_is_not_a_valid_async_function_return_type = new DiagnosticMessage { Code = 1055, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_a_valid_async_function_return_type_1055", Message = "Type '{0}' is not a valid async function return type." };
        public static readonly IDiagnosticMessage Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher = new DiagnosticMessage { Code = 1056, Category = DiagnosticCategory.Error, Key = "Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher_1056", Message = "Accessors are only available when targeting ECMAScript 5 and higher." };
        public static readonly IDiagnosticMessage An_async_function_or_method_must_have_a_valid_awaitable_return_type = new DiagnosticMessage { Code = 1057, Category = DiagnosticCategory.Error, Key = "An_async_function_or_method_must_have_a_valid_awaitable_return_type_1057", Message = "An async function or method must have a valid awaitable return type." };
        public static readonly IDiagnosticMessage Operand_for_await_does_not_have_a_valid_callable_then_member = new DiagnosticMessage { Code = 1058, Category = DiagnosticCategory.Error, Key = "Operand_for_await_does_not_have_a_valid_callable_then_member_1058", Message = "Operand for 'await' does not have a valid callable 'then' member." };
        public static readonly IDiagnosticMessage Return_expression_in_async_function_does_not_have_a_valid_callable_then_member = new DiagnosticMessage { Code = 1059, Category = DiagnosticCategory.Error, Key = "Return_expression_in_async_function_does_not_have_a_valid_callable_then_member_1059", Message = "Return expression in async function does not have a valid callable 'then' member." };
        public static readonly IDiagnosticMessage Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member = new DiagnosticMessage { Code = 1060, Category = DiagnosticCategory.Error, Key = "Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member_1060", Message = "Expression body for async arrow function does not have a valid callable 'then' member." };
        public static readonly IDiagnosticMessage Enum_member_must_have_initializer = new DiagnosticMessage { Code = 1061, Category = DiagnosticCategory.Error, Key = "Enum_member_must_have_initializer_1061", Message = "Enum member must have initializer." };
        public static readonly IDiagnosticMessage Zero_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method = new DiagnosticMessage { Code = 1062, Category = DiagnosticCategory.Error, Key = "_0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method_1062", Message = "{0} is referenced directly or indirectly in the fulfillment callback of its own 'then' method." };
        public static readonly IDiagnosticMessage An_export_assignment_cannot_be_used_in_a_namespace = new DiagnosticMessage { Code = 1063, Category = DiagnosticCategory.Error, Key = "An_export_assignment_cannot_be_used_in_a_namespace_1063", Message = "An export assignment cannot be used in a namespace." };
        public static readonly IDiagnosticMessage In_ambient_enum_declarations_member_initializer_must_be_constant_expression = new DiagnosticMessage { Code = 1066, Category = DiagnosticCategory.Error, Key = "In_ambient_enum_declarations_member_initializer_must_be_constant_expression_1066", Message = "In ambient enum declarations member initializer must be constant expression." };
        public static readonly IDiagnosticMessage Unexpected_token_A_constructor_method_accessor_or_property_was_expected = new DiagnosticMessage { Code = 1068, Category = DiagnosticCategory.Error, Key = "Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068", Message = "Unexpected token. A constructor, method, accessor, or property was expected." };
        public static readonly IDiagnosticMessage A_0_modifier_cannot_be_used_with_an_import_declaration = new DiagnosticMessage { Code = 1079, Category = DiagnosticCategory.Error, Key = "A_0_modifier_cannot_be_used_with_an_import_declaration_1079", Message = "A '{0}' modifier cannot be used with an import declaration." };
        public static readonly IDiagnosticMessage Invalid_reference_directive_syntax = new DiagnosticMessage { Code = 1084, Category = DiagnosticCategory.Error, Key = "Invalid_reference_directive_syntax_1084", Message = "Invalid 'reference' directive syntax." };
        public static readonly IDiagnosticMessage Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher = new DiagnosticMessage { Code = 1085, Category = DiagnosticCategory.Error, Key = "Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_1085", Message = "Octal literals are not available when targeting ECMAScript 5 and higher." };
        public static readonly IDiagnosticMessage An_accessor_cannot_be_declared_in_an_ambient_context = new DiagnosticMessage { Code = 1086, Category = DiagnosticCategory.Error, Key = "An_accessor_cannot_be_declared_in_an_ambient_context_1086", Message = "An accessor cannot be declared in an ambient context." };
        public static readonly IDiagnosticMessage Zero_modifier_cannot_appear_on_a_constructor_declaration = new DiagnosticMessage { Code = 1089, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_appear_on_a_constructor_declaration_1089", Message = "'{0}' modifier cannot appear on a constructor declaration." };
        public static readonly IDiagnosticMessage Zero_modifier_cannot_appear_on_a_parameter = new DiagnosticMessage { Code = 1090, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_appear_on_a_parameter_1090", Message = "'{0}' modifier cannot appear on a parameter." };
        public static readonly IDiagnosticMessage Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement = new DiagnosticMessage { Code = 1091, Category = DiagnosticCategory.Error, Key = "Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement_1091", Message = "Only a single variable declaration is allowed in a 'for...in' statement." };
        public static readonly IDiagnosticMessage Type_parameters_cannot_appear_on_a_constructor_declaration = new DiagnosticMessage { Code = 1092, Category = DiagnosticCategory.Error, Key = "Type_parameters_cannot_appear_on_a_constructor_declaration_1092", Message = "Type parameters cannot appear on a constructor declaration." };
        public static readonly IDiagnosticMessage Type_annotation_cannot_appear_on_a_constructor_declaration = new DiagnosticMessage { Code = 1093, Category = DiagnosticCategory.Error, Key = "Type_annotation_cannot_appear_on_a_constructor_declaration_1093", Message = "Type annotation cannot appear on a constructor declaration." };
        public static readonly IDiagnosticMessage An_accessor_cannot_have_type_parameters = new DiagnosticMessage { Code = 1094, Category = DiagnosticCategory.Error, Key = "An_accessor_cannot_have_type_parameters_1094", Message = "An accessor cannot have type parameters." };
        public static readonly IDiagnosticMessage A_set_accessor_cannot_have_a_return_type_annotation = new DiagnosticMessage { Code = 1095, Category = DiagnosticCategory.Error, Key = "A_set_accessor_cannot_have_a_return_type_annotation_1095", Message = "A 'set' accessor cannot have a return type annotation." };
        public static readonly IDiagnosticMessage An_index_signature_must_have_exactly_one_parameter = new DiagnosticMessage { Code = 1096, Category = DiagnosticCategory.Error, Key = "An_index_signature_must_have_exactly_one_parameter_1096", Message = "An index signature must have exactly one parameter." };
        public static readonly IDiagnosticMessage Zero_list_cannot_be_empty = new DiagnosticMessage { Code = 1097, Category = DiagnosticCategory.Error, Key = "_0_list_cannot_be_empty_1097", Message = "'{0}' list cannot be empty." };
        public static readonly IDiagnosticMessage Type_parameter_list_cannot_be_empty = new DiagnosticMessage { Code = 1098, Category = DiagnosticCategory.Error, Key = "Type_parameter_list_cannot_be_empty_1098", Message = "Type parameter list cannot be empty." };
        public static readonly IDiagnosticMessage Type_argument_list_cannot_be_empty = new DiagnosticMessage { Code = 1099, Category = DiagnosticCategory.Error, Key = "Type_argument_list_cannot_be_empty_1099", Message = "Type argument list cannot be empty." };
        public static readonly IDiagnosticMessage Invalid_use_of_0_in_strict_mode = new DiagnosticMessage { Code = 1100, Category = DiagnosticCategory.Error, Key = "Invalid_use_of_0_in_strict_mode_1100", Message = "Invalid use of '{0}' in strict mode." };
        public static readonly IDiagnosticMessage With_statements_are_not_allowed_in_strict_mode = new DiagnosticMessage { Code = 1101, Category = DiagnosticCategory.Error, Key = "with_statements_are_not_allowed_in_strict_mode_1101", Message = "'with' statements are not allowed in strict mode." };
        public static readonly IDiagnosticMessage Delete_cannot_be_called_on_an_identifier_in_strict_mode = new DiagnosticMessage { Code = 1102, Category = DiagnosticCategory.Error, Key = "delete_cannot_be_called_on_an_identifier_in_strict_mode_1102", Message = "'delete' cannot be called on an identifier in strict mode." };
        public static readonly IDiagnosticMessage A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = new DiagnosticMessage { Code = 1104, Category = DiagnosticCategory.Error, Key = "A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement_1104", Message = "A 'continue' statement can only be used within an enclosing iteration statement." };
        public static readonly IDiagnosticMessage A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = new DiagnosticMessage { Code = 1105, Category = DiagnosticCategory.Error, Key = "A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement_1105", Message = "A 'break' statement can only be used within an enclosing iteration or switch statement." };
        public static readonly IDiagnosticMessage Jump_target_cannot_cross_function_boundary = new DiagnosticMessage { Code = 1107, Category = DiagnosticCategory.Error, Key = "Jump_target_cannot_cross_function_boundary_1107", Message = "Jump target cannot cross function boundary." };
        public static readonly IDiagnosticMessage A_return_statement_can_only_be_used_within_a_function_body = new DiagnosticMessage { Code = 1108, Category = DiagnosticCategory.Error, Key = "A_return_statement_can_only_be_used_within_a_function_body_1108", Message = "A 'return' statement can only be used within a function body." };
        public static readonly IDiagnosticMessage Expression_expected = new DiagnosticMessage { Code = 1109, Category = DiagnosticCategory.Error, Key = "Expression_expected_1109", Message = "Expression expected." };
        public static readonly IDiagnosticMessage Type_expected = new DiagnosticMessage { Code = 1110, Category = DiagnosticCategory.Error, Key = "Type_expected_1110", Message = "Type expected." };
        public static readonly IDiagnosticMessage A_class_member_cannot_be_declared_optional = new DiagnosticMessage { Code = 1112, Category = DiagnosticCategory.Error, Key = "A_class_member_cannot_be_declared_optional_1112", Message = "A class member cannot be declared optional." };
        public static readonly IDiagnosticMessage A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = new DiagnosticMessage { Code = 1113, Category = DiagnosticCategory.Error, Key = "A_default_clause_cannot_appear_more_than_once_in_a_switch_statement_1113", Message = "A 'default' clause cannot appear more than once in a 'switch' statement." };
        public static readonly IDiagnosticMessage Duplicate_label_0 = new DiagnosticMessage { Code = 1114, Category = DiagnosticCategory.Error, Key = "Duplicate_label_0_1114", Message = "Duplicate label '{0}'" };
        public static readonly IDiagnosticMessage A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement = new DiagnosticMessage { Code = 1115, Category = DiagnosticCategory.Error, Key = "A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement_1115", Message = "A 'continue' statement can only jump to a label of an enclosing iteration statement." };
        public static readonly IDiagnosticMessage A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement = new DiagnosticMessage { Code = 1116, Category = DiagnosticCategory.Error, Key = "A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement_1116", Message = "A 'break' statement can only jump to a label of an enclosing statement." };
        public static readonly IDiagnosticMessage An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode = new DiagnosticMessage { Code = 1117, Category = DiagnosticCategory.Error, Key = "An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode_1117", Message = "An object literal cannot have multiple properties with the same name in strict mode." };
        public static readonly IDiagnosticMessage An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name = new DiagnosticMessage { Code = 1118, Category = DiagnosticCategory.Error, Key = "An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name_1118", Message = "An object literal cannot have multiple get/set accessors with the same name." };
        public static readonly IDiagnosticMessage An_object_literal_cannot_have_property_and_accessor_with_the_same_name = new DiagnosticMessage { Code = 1119, Category = DiagnosticCategory.Error, Key = "An_object_literal_cannot_have_property_and_accessor_with_the_same_name_1119", Message = "An object literal cannot have property and accessor with the same name." };
        public static readonly IDiagnosticMessage An_export_assignment_cannot_have_modifiers = new DiagnosticMessage { Code = 1120, Category = DiagnosticCategory.Error, Key = "An_export_assignment_cannot_have_modifiers_1120", Message = "An export assignment cannot have modifiers." };
        public static readonly IDiagnosticMessage Octal_literals_are_not_allowed_in_strict_mode = new DiagnosticMessage { Code = 1121, Category = DiagnosticCategory.Error, Key = "Octal_literals_are_not_allowed_in_strict_mode_1121", Message = "Octal literals are not allowed in strict mode." };
        public static readonly IDiagnosticMessage A_tuple_type_element_list_cannot_be_empty = new DiagnosticMessage { Code = 1122, Category = DiagnosticCategory.Error, Key = "A_tuple_type_element_list_cannot_be_empty_1122", Message = "A tuple type element list cannot be empty." };
        public static readonly IDiagnosticMessage Variable_declaration_list_cannot_be_empty = new DiagnosticMessage { Code = 1123, Category = DiagnosticCategory.Error, Key = "Variable_declaration_list_cannot_be_empty_1123", Message = "Variable declaration list cannot be empty." };
        public static readonly IDiagnosticMessage Digit_expected = new DiagnosticMessage { Code = 1124, Category = DiagnosticCategory.Error, Key = "Digit_expected_1124", Message = "Digit expected." };
        public static readonly IDiagnosticMessage Hexadecimal_digit_expected = new DiagnosticMessage { Code = 1125, Category = DiagnosticCategory.Error, Key = "Hexadecimal_digit_expected_1125", Message = "Hexadecimal digit expected." };
        public static readonly IDiagnosticMessage Unexpected_end_of_text = new DiagnosticMessage { Code = 1126, Category = DiagnosticCategory.Error, Key = "Unexpected_end_of_text_1126", Message = "Unexpected end of text." };
        public static readonly IDiagnosticMessage Invalid_character = new DiagnosticMessage { Code = 1127, Category = DiagnosticCategory.Error, Key = "Invalid_character_1127", Message = "Invalid character." };
        public static readonly IDiagnosticMessage Declaration_or_statement_expected = new DiagnosticMessage { Code = 1128, Category = DiagnosticCategory.Error, Key = "Declaration_or_statement_expected_1128", Message = "Declaration or statement expected." };
        public static readonly IDiagnosticMessage Statement_expected = new DiagnosticMessage { Code = 1129, Category = DiagnosticCategory.Error, Key = "Statement_expected_1129", Message = "Statement expected." };
        public static readonly IDiagnosticMessage Case_or_default_expected = new DiagnosticMessage { Code = 1130, Category = DiagnosticCategory.Error, Key = "case_or_default_expected_1130", Message = "'case' or 'default' expected." };
        public static readonly IDiagnosticMessage Property_or_signature_expected = new DiagnosticMessage { Code = 1131, Category = DiagnosticCategory.Error, Key = "Property_or_signature_expected_1131", Message = "Property or signature expected." };
        public static readonly IDiagnosticMessage Enum_member_expected = new DiagnosticMessage { Code = 1132, Category = DiagnosticCategory.Error, Key = "Enum_member_expected_1132", Message = "Enum member expected." };
        public static readonly IDiagnosticMessage Variable_declaration_expected = new DiagnosticMessage { Code = 1134, Category = DiagnosticCategory.Error, Key = "Variable_declaration_expected_1134", Message = "Variable declaration expected." };
        public static readonly IDiagnosticMessage Argument_expression_expected = new DiagnosticMessage { Code = 1135, Category = DiagnosticCategory.Error, Key = "Argument_expression_expected_1135", Message = "Argument expression expected." };
        public static readonly IDiagnosticMessage Property_assignment_expected = new DiagnosticMessage { Code = 1136, Category = DiagnosticCategory.Error, Key = "Property_assignment_expected_1136", Message = "Property assignment expected." };
        public static readonly IDiagnosticMessage Expression_or_comma_expected = new DiagnosticMessage { Code = 1137, Category = DiagnosticCategory.Error, Key = "Expression_or_comma_expected_1137", Message = "Expression or comma expected." };
        public static readonly IDiagnosticMessage Parameter_declaration_expected = new DiagnosticMessage { Code = 1138, Category = DiagnosticCategory.Error, Key = "Parameter_declaration_expected_1138", Message = "Parameter declaration expected." };
        public static readonly IDiagnosticMessage Type_parameter_declaration_expected = new DiagnosticMessage { Code = 1139, Category = DiagnosticCategory.Error, Key = "Type_parameter_declaration_expected_1139", Message = "Type parameter declaration expected." };
        public static readonly IDiagnosticMessage Type_argument_expected = new DiagnosticMessage { Code = 1140, Category = DiagnosticCategory.Error, Key = "Type_argument_expected_1140", Message = "Type argument expected." };
        public static readonly IDiagnosticMessage String_literal_expected = new DiagnosticMessage { Code = 1141, Category = DiagnosticCategory.Error, Key = "String_literal_expected_1141", Message = "String literal expected." };
        public static readonly IDiagnosticMessage Line_break_not_permitted_here = new DiagnosticMessage { Code = 1142, Category = DiagnosticCategory.Error, Key = "Line_break_not_permitted_here_1142", Message = "Line break not permitted here." };
        public static readonly IDiagnosticMessage Or_expected = new DiagnosticMessage { Code = 1144, Category = DiagnosticCategory.Error, Key = "or_expected_1144", Message = "'{{' or ';' expected." };
        public static readonly IDiagnosticMessage Modifiers_not_permitted_on_index_signature_members = new DiagnosticMessage { Code = 1145, Category = DiagnosticCategory.Error, Key = "Modifiers_not_permitted_on_index_signature_members_1145", Message = "Modifiers not permitted on index signature members." };
        public static readonly IDiagnosticMessage Declaration_expected = new DiagnosticMessage { Code = 1146, Category = DiagnosticCategory.Error, Key = "Declaration_expected_1146", Message = "Declaration expected." };
        public static readonly IDiagnosticMessage Import_declarations_in_a_namespace_cannot_reference_a_module = new DiagnosticMessage { Code = 1147, Category = DiagnosticCategory.Error, Key = "Import_declarations_in_a_namespace_cannot_reference_a_module_1147", Message = "Import declarations in a namespace cannot reference a module." };
        public static readonly IDiagnosticMessage Cannot_compile_modules_unless_the_module_flag_is_provided_Consider_setting_the_module_compiler_option_in_a_tsconfig_json_file = new DiagnosticMessage { Code = 1148, Category = DiagnosticCategory.Error, Key = "Cannot_compile_modules_unless_the_module_flag_is_provided_Consider_setting_the_module_compiler_optio_1148", Message = "Cannot compile modules unless the '--module' flag is provided. Consider setting the 'module' compiler option in a 'tsconfig.json' file." };
        public static readonly IDiagnosticMessage File_name_0_differs_from_already_included_file_name_1_only_in_casing = new DiagnosticMessage { Code = 1149, Category = DiagnosticCategory.Error, Key = "File_name_0_differs_from_already_included_file_name_1_only_in_casing_1149", Message = "File name '{0}' differs from already included file name '{1}' only in casing" };
        public static readonly IDiagnosticMessage New_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead = new DiagnosticMessage { Code = 1150, Category = DiagnosticCategory.Error, Key = "new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead_1150", Message = "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead." };
        public static readonly IDiagnosticMessage Const_declarations_must_be_initialized = new DiagnosticMessage { Code = 1155, Category = DiagnosticCategory.Error, Key = "const_declarations_must_be_initialized_1155", Message = "'const' declarations must be initialized" };
        public static readonly IDiagnosticMessage Const_declarations_can_only_be_declared_inside_a_block = new DiagnosticMessage { Code = 1156, Category = DiagnosticCategory.Error, Key = "const_declarations_can_only_be_declared_inside_a_block_1156", Message = "'const' declarations can only be declared inside a block." };
        public static readonly IDiagnosticMessage Let_declarations_can_only_be_declared_inside_a_block = new DiagnosticMessage { Code = 1157, Category = DiagnosticCategory.Error, Key = "let_declarations_can_only_be_declared_inside_a_block_1157", Message = "'let' declarations can only be declared inside a block." };
        public static readonly IDiagnosticMessage Unterminated_template_literal = new DiagnosticMessage { Code = 1160, Category = DiagnosticCategory.Error, Key = "Unterminated_template_literal_1160", Message = "Unterminated template literal." };
        public static readonly IDiagnosticMessage Unterminated_regular_expression_literal = new DiagnosticMessage { Code = 1161, Category = DiagnosticCategory.Error, Key = "Unterminated_regular_expression_literal_1161", Message = "Unterminated regular expression literal." };
        public static readonly IDiagnosticMessage An_object_member_cannot_be_declared_optional = new DiagnosticMessage { Code = 1162, Category = DiagnosticCategory.Error, Key = "An_object_member_cannot_be_declared_optional_1162", Message = "An object member cannot be declared optional." };
        public static readonly IDiagnosticMessage A_yield_expression_is_only_allowed_in_a_generator_body = new DiagnosticMessage { Code = 1163, Category = DiagnosticCategory.Error, Key = "A_yield_expression_is_only_allowed_in_a_generator_body_1163", Message = "A 'yield' expression is only allowed in a generator body." };
        public static readonly IDiagnosticMessage Computed_property_names_are_not_allowed_in_enums = new DiagnosticMessage { Code = 1164, Category = DiagnosticCategory.Error, Key = "Computed_property_names_are_not_allowed_in_enums_1164", Message = "Computed property names are not allowed in enums." };
        public static readonly IDiagnosticMessage A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol = new DiagnosticMessage { Code = 1165, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol_1165", Message = "A computed property name in an ambient context must directly refer to a built-in symbol." };
        public static readonly IDiagnosticMessage A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol = new DiagnosticMessage { Code = 1166, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol_1166", Message = "A computed property name in a class property declaration must directly refer to a built-in symbol." };
        public static readonly IDiagnosticMessage A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol = new DiagnosticMessage { Code = 1168, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol_1168", Message = "A computed property name in a method overload must directly refer to a built-in symbol." };
        public static readonly IDiagnosticMessage A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol = new DiagnosticMessage { Code = 1169, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol_1169", Message = "A computed property name in an interface must directly refer to a built-in symbol." };
        public static readonly IDiagnosticMessage A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol = new DiagnosticMessage { Code = 1170, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol_1170", Message = "A computed property name in a type literal must directly refer to a built-in symbol." };
        public static readonly IDiagnosticMessage A_comma_expression_is_not_allowed_in_a_computed_property_name = new DiagnosticMessage { Code = 1171, Category = DiagnosticCategory.Error, Key = "A_comma_expression_is_not_allowed_in_a_computed_property_name_1171", Message = "A comma expression is not allowed in a computed property name." };
        public static readonly IDiagnosticMessage Extends_clause_already_seen = new DiagnosticMessage { Code = 1172, Category = DiagnosticCategory.Error, Key = "extends_clause_already_seen_1172", Message = "'extends' clause already seen." };
        public static readonly IDiagnosticMessage Extends_clause_must_precede_implements_clause = new DiagnosticMessage { Code = 1173, Category = DiagnosticCategory.Error, Key = "extends_clause_must_precede_implements_clause_1173", Message = "'extends' clause must precede 'implements' clause." };
        public static readonly IDiagnosticMessage Classes_can_only_extend_a_single_class = new DiagnosticMessage { Code = 1174, Category = DiagnosticCategory.Error, Key = "Classes_can_only_extend_a_single_class_1174", Message = "Classes can only extend a single class." };
        public static readonly IDiagnosticMessage Implements_clause_already_seen = new DiagnosticMessage { Code = 1175, Category = DiagnosticCategory.Error, Key = "implements_clause_already_seen_1175", Message = "'implements' clause already seen." };
        public static readonly IDiagnosticMessage Interface_declaration_cannot_have_implements_clause = new DiagnosticMessage { Code = 1176, Category = DiagnosticCategory.Error, Key = "Interface_declaration_cannot_have_implements_clause_1176", Message = "Interface declaration cannot have 'implements' clause." };
        public static readonly IDiagnosticMessage Binary_digit_expected = new DiagnosticMessage { Code = 1177, Category = DiagnosticCategory.Error, Key = "Binary_digit_expected_1177", Message = "Binary digit expected." };
        public static readonly IDiagnosticMessage Octal_digit_expected = new DiagnosticMessage { Code = 1178, Category = DiagnosticCategory.Error, Key = "Octal_digit_expected_1178", Message = "Octal digit expected." };
        public static readonly IDiagnosticMessage Unexpected_token_expected = new DiagnosticMessage { Code = 1179, Category = DiagnosticCategory.Error, Key = "Unexpected_token_expected_1179", Message = "Unexpected token. '{{' expected." };
        public static readonly IDiagnosticMessage Property_destructuring_pattern_expected = new DiagnosticMessage { Code = 1180, Category = DiagnosticCategory.Error, Key = "Property_destructuring_pattern_expected_1180", Message = "Property destructuring pattern expected." };
        public static readonly IDiagnosticMessage Array_element_destructuring_pattern_expected = new DiagnosticMessage { Code = 1181, Category = DiagnosticCategory.Error, Key = "Array_element_destructuring_pattern_expected_1181", Message = "Array element destructuring pattern expected." };
        public static readonly IDiagnosticMessage A_destructuring_declaration_must_have_an_initializer = new DiagnosticMessage { Code = 1182, Category = DiagnosticCategory.Error, Key = "A_destructuring_declaration_must_have_an_initializer_1182", Message = "A destructuring declaration must have an initializer." };
        public static readonly IDiagnosticMessage An_implementation_cannot_be_declared_in_ambient_contexts = new DiagnosticMessage { Code = 1183, Category = DiagnosticCategory.Error, Key = "An_implementation_cannot_be_declared_in_ambient_contexts_1183", Message = "An implementation cannot be declared in ambient contexts." };
        public static readonly IDiagnosticMessage Modifiers_cannot_appear_here = new DiagnosticMessage { Code = 1184, Category = DiagnosticCategory.Error, Key = "Modifiers_cannot_appear_here_1184", Message = "Modifiers cannot appear here." };
        public static readonly IDiagnosticMessage Merge_conflict_marker_encountered = new DiagnosticMessage { Code = 1185, Category = DiagnosticCategory.Error, Key = "Merge_conflict_marker_encountered_1185", Message = "Merge conflict marker encountered." };
        public static readonly IDiagnosticMessage A_rest_element_cannot_have_an_initializer = new DiagnosticMessage { Code = 1186, Category = DiagnosticCategory.Error, Key = "A_rest_element_cannot_have_an_initializer_1186", Message = "A rest element cannot have an initializer." };
        public static readonly IDiagnosticMessage A_parameter_property_may_not_be_a_binding_pattern = new DiagnosticMessage { Code = 1187, Category = DiagnosticCategory.Error, Key = "A_parameter_property_may_not_be_a_binding_pattern_1187", Message = "A parameter property may not be a binding pattern." };
        public static readonly IDiagnosticMessage Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement = new DiagnosticMessage { Code = 1188, Category = DiagnosticCategory.Error, Key = "Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement_1188", Message = "Only a single variable declaration is allowed in a 'for...of' statement." };
        public static readonly IDiagnosticMessage The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer = new DiagnosticMessage { Code = 1189, Category = DiagnosticCategory.Error, Key = "The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer_1189", Message = "The variable declaration of a 'for...in' statement cannot have an initializer." };
        public static readonly IDiagnosticMessage The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = new DiagnosticMessage { Code = 1190, Category = DiagnosticCategory.Error, Key = "The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer_1190", Message = "The variable declaration of a 'for...of' statement cannot have an initializer." };
        public static readonly IDiagnosticMessage An_import_declaration_cannot_have_modifiers = new DiagnosticMessage { Code = 1191, Category = DiagnosticCategory.Error, Key = "An_import_declaration_cannot_have_modifiers_1191", Message = "An import declaration cannot have modifiers." };
        public static readonly IDiagnosticMessage Module_0_has_no_default_export = new DiagnosticMessage { Code = 1192, Category = DiagnosticCategory.Error, Key = "Module_0_has_no_default_export_1192", Message = "Module '{0}' has no default export." };
        public static readonly IDiagnosticMessage An_export_declaration_cannot_have_modifiers = new DiagnosticMessage { Code = 1193, Category = DiagnosticCategory.Error, Key = "An_export_declaration_cannot_have_modifiers_1193", Message = "An export declaration cannot have modifiers." };
        public static readonly IDiagnosticMessage Export_declarations_are_not_permitted_in_a_namespace = new DiagnosticMessage { Code = 1194, Category = DiagnosticCategory.Error, Key = "Export_declarations_are_not_permitted_in_a_namespace_1194", Message = "Export declarations are not permitted in a namespace." };
        public static readonly IDiagnosticMessage Catch_clause_variable_name_must_be_an_identifier = new DiagnosticMessage { Code = 1195, Category = DiagnosticCategory.Error, Key = "Catch_clause_variable_name_must_be_an_identifier_1195", Message = "Catch clause variable name must be an identifier." };
        public static readonly IDiagnosticMessage Catch_clause_variable_cannot_have_a_type_annotation = new DiagnosticMessage { Code = 1196, Category = DiagnosticCategory.Error, Key = "Catch_clause_variable_cannot_have_a_type_annotation_1196", Message = "Catch clause variable cannot have a type annotation." };
        public static readonly IDiagnosticMessage Catch_clause_variable_cannot_have_an_initializer = new DiagnosticMessage { Code = 1197, Category = DiagnosticCategory.Error, Key = "Catch_clause_variable_cannot_have_an_initializer_1197", Message = "Catch clause variable cannot have an initializer." };
        public static readonly IDiagnosticMessage An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = new DiagnosticMessage { Code = 1198, Category = DiagnosticCategory.Error, Key = "An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198", Message = "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive." };
        public static readonly IDiagnosticMessage Unterminated_Unicode_escape_sequence = new DiagnosticMessage { Code = 1199, Category = DiagnosticCategory.Error, Key = "Unterminated_Unicode_escape_sequence_1199", Message = "Unterminated Unicode escape sequence." };
        public static readonly IDiagnosticMessage Line_terminator_not_permitted_before_arrow = new DiagnosticMessage { Code = 1200, Category = DiagnosticCategory.Error, Key = "Line_terminator_not_permitted_before_arrow_1200", Message = "Line terminator not permitted before arrow." };
        public static readonly IDiagnosticMessage Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead = new DiagnosticMessage
        {
            Code = 1202,
            Category = DiagnosticCategory.Error,
            Key = "Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_import_Asterisk__1202",
            Message = "Import assignment cannot be used when targeting ECMAScript 6 modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.",
        };

        public static readonly IDiagnosticMessage Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_export_default_or_another_module_format_instead = new DiagnosticMessage { Code = 1203, Category = DiagnosticCategory.Error, Key = "Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_export_default_o_1203", Message = "Export assignment cannot be used when targeting ECMAScript 6 modules. Consider using 'export default' or another module format instead." };
        public static readonly IDiagnosticMessage Cannot_compile_modules_into_es2015_when_targeting_ES5_or_lower = new DiagnosticMessage { Code = 1204, Category = DiagnosticCategory.Error, Key = "Cannot_compile_modules_into_es2015_when_targeting_ES5_or_lower_1204", Message = "Cannot compile modules into 'es2015' when targeting 'ES5' or lower." };
        public static readonly IDiagnosticMessage Decorators_are_not_valid_here = new DiagnosticMessage { Code = 1206, Category = DiagnosticCategory.Error, Key = "Decorators_are_not_valid_here_1206", Message = "Decorators are not valid here." };
        public static readonly IDiagnosticMessage Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name = new DiagnosticMessage { Code = 1207, Category = DiagnosticCategory.Error, Key = "Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name_1207", Message = "Decorators cannot be applied to multiple get/set accessors of the same name." };
        public static readonly IDiagnosticMessage Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided = new DiagnosticMessage { Code = 1208, Category = DiagnosticCategory.Error, Key = "Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided_1208", Message = "Cannot compile namespaces when the '--isolatedModules' flag is provided." };
        public static readonly IDiagnosticMessage Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided = new DiagnosticMessage { Code = 1209, Category = DiagnosticCategory.Error, Key = "Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided_1209", Message = "Ambient const enums are not allowed when the '--isolatedModules' flag is provided." };
        public static readonly IDiagnosticMessage Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode = new DiagnosticMessage { Code = 1210, Category = DiagnosticCategory.Error, Key = "Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode_1210", Message = "Invalid use of '{0}'. Class definitions are automatically in strict mode." };
        public static readonly IDiagnosticMessage A_class_declaration_without_the_default_modifier_must_have_a_name = new DiagnosticMessage { Code = 1211, Category = DiagnosticCategory.Error, Key = "A_class_declaration_without_the_default_modifier_must_have_a_name_1211", Message = "A class declaration without the 'default' modifier must have a name" };
        public static readonly IDiagnosticMessage Identifier_expected_0_is_a_reserved_word_in_strict_mode = new DiagnosticMessage { Code = 1212, Category = DiagnosticCategory.Error, Key = "Identifier_expected_0_is_a_reserved_word_in_strict_mode_1212", Message = "Identifier expected. '{0}' is a reserved word in strict mode" };
        public static readonly IDiagnosticMessage Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode = new DiagnosticMessage { Code = 1213, Category = DiagnosticCategory.Error, Key = "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_stric_1213", Message = "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode." };
        public static readonly IDiagnosticMessage Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode = new DiagnosticMessage { Code = 1214, Category = DiagnosticCategory.Error, Key = "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode_1214", Message = "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode." };
        public static readonly IDiagnosticMessage Invalid_use_of_0_Modules_are_automatically_in_strict_mode = new DiagnosticMessage { Code = 1215, Category = DiagnosticCategory.Error, Key = "Invalid_use_of_0_Modules_are_automatically_in_strict_mode_1215", Message = "Invalid use of '{0}'. Modules are automatically in strict mode." };
        public static readonly IDiagnosticMessage Export_assignment_is_not_supported_when_module_flag_is_system = new DiagnosticMessage { Code = 1218, Category = DiagnosticCategory.Error, Key = "Export_assignment_is_not_supported_when_module_flag_is_system_1218", Message = "Export assignment is not supported when '--module' flag is 'system'." };
        public static readonly IDiagnosticMessage Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning = new DiagnosticMessage { Code = 1219, Category = DiagnosticCategory.Error, Key = "Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Speci_1219", Message = "Experimental support for decorators is a feature that is subject to change in a future release. Specify '--experimentalDecorators' to remove this warning." };
        public static readonly IDiagnosticMessage Generators_are_only_available_when_targeting_ECMAScript_6_or_higher = new DiagnosticMessage { Code = 1220, Category = DiagnosticCategory.Error, Key = "Generators_are_only_available_when_targeting_ECMAScript_6_or_higher_1220", Message = "Generators are only available when targeting ECMAScript 6 or higher." };
        public static readonly IDiagnosticMessage Generators_are_not_allowed_in_an_ambient_context = new DiagnosticMessage { Code = 1221, Category = DiagnosticCategory.Error, Key = "Generators_are_not_allowed_in_an_ambient_context_1221", Message = "Generators are not allowed in an ambient context." };
        public static readonly IDiagnosticMessage An_overload_signature_cannot_be_declared_as_a_generator = new DiagnosticMessage { Code = 1222, Category = DiagnosticCategory.Error, Key = "An_overload_signature_cannot_be_declared_as_a_generator_1222", Message = "An overload signature cannot be declared as a generator." };
        public static readonly IDiagnosticMessage Zero_tag_already_specified = new DiagnosticMessage { Code = 1223, Category = DiagnosticCategory.Error, Key = "_0_tag_already_specified_1223", Message = "'{0}' tag already specified." };
        public static readonly IDiagnosticMessage Signature_0_must_have_a_type_predicate = new DiagnosticMessage { Code = 1224, Category = DiagnosticCategory.Error, Key = "Signature_0_must_have_a_type_predicate_1224", Message = "Signature '{0}' must have a type predicate." };
        public static readonly IDiagnosticMessage Cannot_find_parameter_0 = new DiagnosticMessage { Code = 1225, Category = DiagnosticCategory.Error, Key = "Cannot_find_parameter_0_1225", Message = "Cannot find parameter '{0}'." };
        public static readonly IDiagnosticMessage Type_predicate_0_is_not_assignable_to_1 = new DiagnosticMessage { Code = 1226, Category = DiagnosticCategory.Error, Key = "Type_predicate_0_is_not_assignable_to_1_1226", Message = "Type predicate '{0}' is not assignable to '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_is_not_in_the_same_position_as_parameter_1 = new DiagnosticMessage { Code = 1227, Category = DiagnosticCategory.Error, Key = "Parameter_0_is_not_in_the_same_position_as_parameter_1_1227", Message = "Parameter '{0}' is not in the same position as parameter '{1}'." };
        public static readonly IDiagnosticMessage A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods = new DiagnosticMessage { Code = 1228, Category = DiagnosticCategory.Error, Key = "A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228", Message = "A type predicate is only allowed in return type position for functions and methods." };
        public static readonly IDiagnosticMessage A_type_predicate_cannot_reference_a_rest_parameter = new DiagnosticMessage { Code = 1229, Category = DiagnosticCategory.Error, Key = "A_type_predicate_cannot_reference_a_rest_parameter_1229", Message = "A type predicate cannot reference a rest parameter." };
        public static readonly IDiagnosticMessage A_type_predicate_cannot_reference_element_0_in_a_binding_pattern = new DiagnosticMessage { Code = 1230, Category = DiagnosticCategory.Error, Key = "A_type_predicate_cannot_reference_element_0_in_a_binding_pattern_1230", Message = "A type predicate cannot reference element '{0}' in a binding pattern." };
        public static readonly IDiagnosticMessage An_export_assignment_can_only_be_used_in_a_module = new DiagnosticMessage { Code = 1231, Category = DiagnosticCategory.Error, Key = "An_export_assignment_can_only_be_used_in_a_module_1231", Message = "An export assignment can only be used in a module." };
        public static readonly IDiagnosticMessage An_import_declaration_can_only_be_used_in_a_namespace_or_module = new DiagnosticMessage { Code = 1232, Category = DiagnosticCategory.Error, Key = "An_import_declaration_can_only_be_used_in_a_namespace_or_module_1232", Message = "An import declaration can only be used in a namespace or module." };
        public static readonly IDiagnosticMessage An_export_declaration_can_only_be_used_in_a_module = new DiagnosticMessage { Code = 1233, Category = DiagnosticCategory.Error, Key = "An_export_declaration_can_only_be_used_in_a_module_1233", Message = "An export declaration can only be used in a module." };
        public static readonly IDiagnosticMessage An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file = new DiagnosticMessage { Code = 1234, Category = DiagnosticCategory.Error, Key = "An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file_1234", Message = "An ambient module declaration is only allowed at the top level in a file." };
        public static readonly IDiagnosticMessage A_namespace_declaration_is_only_allowed_in_a_namespace_or_module = new DiagnosticMessage { Code = 1235, Category = DiagnosticCategory.Error, Key = "A_namespace_declaration_is_only_allowed_in_a_namespace_or_module_1235", Message = "A namespace declaration is only allowed in a namespace or module." };
        public static readonly IDiagnosticMessage The_return_type_of_a_property_decorator_function_must_be_either_void_or_any = new DiagnosticMessage { Code = 1236, Category = DiagnosticCategory.Error, Key = "The_return_type_of_a_property_decorator_function_must_be_either_void_or_any_1236", Message = "The return type of a property decorator function must be either 'void' or 'any'." };
        public static readonly IDiagnosticMessage The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any = new DiagnosticMessage { Code = 1237, Category = DiagnosticCategory.Error, Key = "The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any_1237", Message = "The return type of a parameter decorator function must be either 'void' or 'any'." };
        public static readonly IDiagnosticMessage Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression = new DiagnosticMessage { Code = 1238, Category = DiagnosticCategory.Error, Key = "Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression_1238", Message = "Unable to resolve signature of class decorator when called as an expression." };
        public static readonly IDiagnosticMessage Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression = new DiagnosticMessage { Code = 1239, Category = DiagnosticCategory.Error, Key = "Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression_1239", Message = "Unable to resolve signature of parameter decorator when called as an expression." };
        public static readonly IDiagnosticMessage Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression = new DiagnosticMessage { Code = 1240, Category = DiagnosticCategory.Error, Key = "Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression_1240", Message = "Unable to resolve signature of property decorator when called as an expression." };
        public static readonly IDiagnosticMessage Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression = new DiagnosticMessage { Code = 1241, Category = DiagnosticCategory.Error, Key = "Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression_1241", Message = "Unable to resolve signature of method decorator when called as an expression." };
        public static readonly IDiagnosticMessage Unable_to_resolve_signature_of_ambient_decorator_when_called_as_an_expression = new DiagnosticMessage { Code = 1291, Category = DiagnosticCategory.Error, Key = "Unable_to_resolve_signature_of_ambient_decorator_when_called_as_an_expression_1291", Message = "Unable to resolve signature of ambient decorator when called as an expression." };
        public static readonly IDiagnosticMessage Abstract_modifier_can_only_appear_on_a_class_or_method_declaration = new DiagnosticMessage { Code = 1242, Category = DiagnosticCategory.Error, Key = "abstract_modifier_can_only_appear_on_a_class_or_method_declaration_1242", Message = "'abstract' modifier can only appear on a class or method declaration." };
        public static readonly IDiagnosticMessage Zero_modifier_cannot_be_used_with_1_modifier = new DiagnosticMessage { Code = 1243, Category = DiagnosticCategory.Error, Key = "_0_modifier_cannot_be_used_with_1_modifier_1243", Message = "'{0}' modifier cannot be used with '{1}' modifier." };
        public static readonly IDiagnosticMessage Abstract_methods_can_only_appear_within_an_abstract_class = new DiagnosticMessage { Code = 1244, Category = DiagnosticCategory.Error, Key = "Abstract_methods_can_only_appear_within_an_abstract_class_1244", Message = "Abstract methods can only appear within an abstract class." };
        public static readonly IDiagnosticMessage Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = new DiagnosticMessage { Code = 1245, Category = DiagnosticCategory.Error, Key = "Method_0_cannot_have_an_implementation_because_it_is_marked_abstract_1245", Message = "Method '{0}' cannot have an implementation because it is marked abstract." };
        public static readonly IDiagnosticMessage An_interface_property_cannot_have_an_initializer = new DiagnosticMessage { Code = 1246, Category = DiagnosticCategory.Error, Key = "An_interface_property_cannot_have_an_initializer_1246", Message = "An interface property cannot have an initializer." };
        public static readonly IDiagnosticMessage A_type_literal_property_cannot_have_an_initializer = new DiagnosticMessage { Code = 1247, Category = DiagnosticCategory.Error, Key = "A_type_literal_property_cannot_have_an_initializer_1247", Message = "A type literal property cannot have an initializer." };
        public static readonly IDiagnosticMessage A_class_member_cannot_have_the_0_keyword = new DiagnosticMessage { Code = 1248, Category = DiagnosticCategory.Error, Key = "A_class_member_cannot_have_the_0_keyword_1248", Message = "A class member cannot have the '{0}' keyword." };
        public static readonly IDiagnosticMessage With_statements_are_not_allowed_in_an_async_function_block = new DiagnosticMessage { Code = 1300, Category = DiagnosticCategory.Error, Key = "with_statements_are_not_allowed_in_an_async_function_block_1300", Message = "'with' statements are not allowed in an async function block." };
        public static readonly IDiagnosticMessage Await_expression_is_only_allowed_within_an_async_function = new DiagnosticMessage { Code = 1308, Category = DiagnosticCategory.Error, Key = "await_expression_is_only_allowed_within_an_async_function_1308", Message = "'await' expression is only allowed within an async function." };
        public static readonly IDiagnosticMessage Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher = new DiagnosticMessage { Code = 1311, Category = DiagnosticCategory.Error, Key = "Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher_1311", Message = "Async functions are only available when targeting ECMAScript 6 and higher." };
        public static readonly IDiagnosticMessage Can_only_be_used_in_an_object_literal_property_inside_a_destructuring_assignment = new DiagnosticMessage { Code = 1312, Category = DiagnosticCategory.Error, Key = "can_only_be_used_in_an_object_literal_property_inside_a_destructuring_assignment_1312", Message = "'=' can only be used in an object literal property inside a destructuring assignment." };
        public static readonly IDiagnosticMessage The_body_of_an_if_statement_cannot_be_the_empty_statement = new DiagnosticMessage { Code = 1313, Category = DiagnosticCategory.Error, Key = "The_body_of_an_if_statement_cannot_be_the_empty_statement_1313", Message = "The body of an 'if' statement cannot be the empty statement." };
        public static readonly IDiagnosticMessage Duplicate_identifier_0 = new DiagnosticMessage { Code = 2300, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_0_2300", Message = "Duplicate identifier '{0}'." };
        public static readonly IDiagnosticMessage Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor = new DiagnosticMessage { Code = 2301, Category = DiagnosticCategory.Error, Key = "Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2301", Message = "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor." };
        public static readonly IDiagnosticMessage Static_members_cannot_reference_class_type_parameters = new DiagnosticMessage { Code = 2302, Category = DiagnosticCategory.Error, Key = "Static_members_cannot_reference_class_type_parameters_2302", Message = "Static members cannot reference class type parameters." };
        public static readonly IDiagnosticMessage Circular_definition_of_import_alias_0 = new DiagnosticMessage { Code = 2303, Category = DiagnosticCategory.Error, Key = "Circular_definition_of_import_alias_0_2303", Message = "Circular definition of import alias '{0}'." };
        public static readonly IDiagnosticMessage Cannot_find_name_0 = new DiagnosticMessage { Code = 2304, Category = DiagnosticCategory.Error, Key = "Cannot_find_name_0_2304", Message = "Cannot find name '{0}'." };
        public static readonly IDiagnosticMessage Module_0_has_no_exported_member_1 = new DiagnosticMessage { Code = 2305, Category = DiagnosticCategory.Error, Key = "Module_0_has_no_exported_member_1_2305", Message = "Module '{0}' has no exported member '{1}'." };
        public static readonly IDiagnosticMessage File_0_is_not_a_module = new DiagnosticMessage { Code = 2306, Category = DiagnosticCategory.Error, Key = "File_0_is_not_a_module_2306", Message = "File '{0}' is not a module." };
        public static readonly IDiagnosticMessage Cannot_find_module_0 = new DiagnosticMessage { Code = 2307, Category = DiagnosticCategory.Error, Key = "Cannot_find_module_0_2307", Message = "Cannot find module '{0}'." };
        public static readonly IDiagnosticMessage Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity = new DiagnosticMessage { Code = 2308, Category = DiagnosticCategory.Error, Key = "Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambig_2308", Message = "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity." };
        public static readonly IDiagnosticMessage An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements = new DiagnosticMessage { Code = 2309, Category = DiagnosticCategory.Error, Key = "An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements_2309", Message = "An export assignment cannot be used in a module with other exported elements." };
        public static readonly IDiagnosticMessage Type_0_recursively_references_itself_as_a_base_type = new DiagnosticMessage { Code = 2310, Category = DiagnosticCategory.Error, Key = "Type_0_recursively_references_itself_as_a_base_type_2310", Message = "Type '{0}' recursively references itself as a base type." };
        public static readonly IDiagnosticMessage A_class_may_only_extend_another_class = new DiagnosticMessage { Code = 2311, Category = DiagnosticCategory.Error, Key = "A_class_may_only_extend_another_class_2311", Message = "A class may only extend another class." };
        public static readonly IDiagnosticMessage An_interface_may_only_extend_a_class_or_another_interface = new DiagnosticMessage { Code = 2312, Category = DiagnosticCategory.Error, Key = "An_interface_may_only_extend_a_class_or_another_interface_2312", Message = "An interface may only extend a class or another interface." };
        public static readonly IDiagnosticMessage Type_parameter_0_has_a_circular_constraint = new DiagnosticMessage { Code = 2313, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_has_a_circular_constraint_2313", Message = "Type parameter '{0}' has a circular constraint." };
        public static readonly IDiagnosticMessage Generic_type_0_requires_1_type_argument_s = new DiagnosticMessage { Code = 2314, Category = DiagnosticCategory.Error, Key = "Generic_type_0_requires_1_type_argument_s_2314", Message = "Generic type '{0}' requires {1} type argument(s)." };
        public static readonly IDiagnosticMessage Type_0_is_not_generic = new DiagnosticMessage { Code = 2315, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_generic_2315", Message = "Type '{0}' is not generic." };
        public static readonly IDiagnosticMessage Global_type_0_must_be_a_class_or_interface_type = new DiagnosticMessage { Code = 2316, Category = DiagnosticCategory.Error, Key = "Global_type_0_must_be_a_class_or_interface_type_2316", Message = "Global type '{0}' must be a class or interface type." };
        public static readonly IDiagnosticMessage Global_type_0_must_have_1_type_parameter_s = new DiagnosticMessage { Code = 2317, Category = DiagnosticCategory.Error, Key = "Global_type_0_must_have_1_type_parameter_s_2317", Message = "Global type '{0}' must have {1} type parameter(s)." };
        public static readonly IDiagnosticMessage Cannot_find_global_type_0 = new DiagnosticMessage { Code = 2318, Category = DiagnosticCategory.Error, Key = "Cannot_find_global_type_0_2318", Message = "Cannot find global type '{0}'." };
        public static readonly IDiagnosticMessage Named_property_0_of_types_1_and_2_are_not_identical = new DiagnosticMessage { Code = 2319, Category = DiagnosticCategory.Error, Key = "Named_property_0_of_types_1_and_2_are_not_identical_2319", Message = "Named property '{0}' of types '{1}' and '{2}' are not identical." };
        public static readonly IDiagnosticMessage Interface_0_cannot_simultaneously_extend_types_1_and_2 = new DiagnosticMessage { Code = 2320, Category = DiagnosticCategory.Error, Key = "Interface_0_cannot_simultaneously_extend_types_1_and_2_2320", Message = "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'." };
        public static readonly IDiagnosticMessage Excessive_stack_depth_comparing_types_0_and_1 = new DiagnosticMessage { Code = 2321, Category = DiagnosticCategory.Error, Key = "Excessive_stack_depth_comparing_types_0_and_1_2321", Message = "Excessive stack depth comparing types '{0}' and '{1}'." };
        public static readonly IDiagnosticMessage Type_0_is_not_assignable_to_type_1 = new DiagnosticMessage { Code = 2322, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_assignable_to_type_1_2322", Message = "Type '{0}' is not assignable to type '{1}'." };
        public static readonly IDiagnosticMessage Cannot_redeclare_exported_variable_0 = new DiagnosticMessage { Code = 2323, Category = DiagnosticCategory.Error, Key = "Cannot_redeclare_exported_variable_0_2323", Message = "Cannot redeclare exported variable '{0}'." };
        public static readonly IDiagnosticMessage Property_0_is_missing_in_type_1 = new DiagnosticMessage { Code = 2324, Category = DiagnosticCategory.Error, Key = "Property_0_is_missing_in_type_1_2324", Message = "Property '{0}' is missing in type '{1}'." };
        public static readonly IDiagnosticMessage Property_0_is_private_in_type_1_but_not_in_type_2 = new DiagnosticMessage { Code = 2325, Category = DiagnosticCategory.Error, Key = "Property_0_is_private_in_type_1_but_not_in_type_2_2325", Message = "Property '{0}' is private in type '{1}' but not in type '{2}'." };
        public static readonly IDiagnosticMessage Types_of_property_0_are_incompatible = new DiagnosticMessage { Code = 2326, Category = DiagnosticCategory.Error, Key = "Types_of_property_0_are_incompatible_2326", Message = "Types of property '{0}' are incompatible." };
        public static readonly IDiagnosticMessage Property_0_is_optional_in_type_1_but_required_in_type_2 = new DiagnosticMessage { Code = 2327, Category = DiagnosticCategory.Error, Key = "Property_0_is_optional_in_type_1_but_required_in_type_2_2327", Message = "Property '{0}' is optional in type '{1}' but required in type '{2}'." };
        public static readonly IDiagnosticMessage Types_of_parameters_0_and_1_are_incompatible = new DiagnosticMessage { Code = 2328, Category = DiagnosticCategory.Error, Key = "Types_of_parameters_0_and_1_are_incompatible_2328", Message = "Types of parameters '{0}' and '{1}' are incompatible." };
        public static readonly IDiagnosticMessage Index_signature_is_missing_in_type_0 = new DiagnosticMessage { Code = 2329, Category = DiagnosticCategory.Error, Key = "Index_signature_is_missing_in_type_0_2329", Message = "Index signature is missing in type '{0}'." };
        public static readonly IDiagnosticMessage Index_signatures_are_incompatible = new DiagnosticMessage { Code = 2330, Category = DiagnosticCategory.Error, Key = "Index_signatures_are_incompatible_2330", Message = "Index signatures are incompatible." };
        public static readonly IDiagnosticMessage This_cannot_be_referenced_in_a_module_or_namespace_body = new DiagnosticMessage { Code = 2331, Category = DiagnosticCategory.Error, Key = "this_cannot_be_referenced_in_a_module_or_namespace_body_2331", Message = "'this' cannot be referenced in a module or namespace body." };
        public static readonly IDiagnosticMessage This_cannot_be_referenced_in_current_location = new DiagnosticMessage { Code = 2332, Category = DiagnosticCategory.Error, Key = "this_cannot_be_referenced_in_current_location_2332", Message = "'this' cannot be referenced in current location." };
        public static readonly IDiagnosticMessage This_cannot_be_referenced_in_constructor_arguments = new DiagnosticMessage { Code = 2333, Category = DiagnosticCategory.Error, Key = "this_cannot_be_referenced_in_constructor_arguments_2333", Message = "'this' cannot be referenced in constructor arguments." };
        public static readonly IDiagnosticMessage This_cannot_be_referenced_in_a_static_property_initializer = new DiagnosticMessage { Code = 2334, Category = DiagnosticCategory.Error, Key = "this_cannot_be_referenced_in_a_static_property_initializer_2334", Message = "'this' cannot be referenced in a static property initializer." };
        public static readonly IDiagnosticMessage Super_can_only_be_referenced_in_a_derived_class = new DiagnosticMessage { Code = 2335, Category = DiagnosticCategory.Error, Key = "super_can_only_be_referenced_in_a_derived_class_2335", Message = "'super' can only be referenced in a derived class." };
        public static readonly IDiagnosticMessage Super_cannot_be_referenced_in_constructor_arguments = new DiagnosticMessage { Code = 2336, Category = DiagnosticCategory.Error, Key = "super_cannot_be_referenced_in_constructor_arguments_2336", Message = "'super' cannot be referenced in constructor arguments." };
        public static readonly IDiagnosticMessage Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = new DiagnosticMessage { Code = 2337, Category = DiagnosticCategory.Error, Key = "Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors_2337", Message = "Super calls are not permitted outside constructors or in nested functions inside constructors." };
        public static readonly IDiagnosticMessage Super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class = new DiagnosticMessage { Code = 2338, Category = DiagnosticCategory.Error, Key = "super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_der_2338", Message = "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class." };
        public static readonly IDiagnosticMessage Property_0_does_not_exist_on_type_1 = new DiagnosticMessage { Code = 2339, Category = DiagnosticCategory.Error, Key = "Property_0_does_not_exist_on_type_1_2339", Message = "Property '{0}' does not exist on type '{1}'." };
        public static readonly IDiagnosticMessage Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword = new DiagnosticMessage { Code = 2340, Category = DiagnosticCategory.Error, Key = "Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword_2340", Message = "Only public and protected methods of the base class are accessible via the 'super' keyword." };
        public static readonly IDiagnosticMessage Property_0_is_private_and_only_accessible_within_class_1 = new DiagnosticMessage { Code = 2341, Category = DiagnosticCategory.Error, Key = "Property_0_is_private_and_only_accessible_within_class_1_2341", Message = "Property '{0}' is private and only accessible within class '{1}'." };
        public static readonly IDiagnosticMessage An_index_expression_argument_must_be_of_type_string_number_symbol_or_any = new DiagnosticMessage { Code = 2342, Category = DiagnosticCategory.Error, Key = "An_index_expression_argument_must_be_of_type_string_number_symbol_or_any_2342", Message = "An index expression argument must be of type 'string', 'number', 'symbol', or 'any'." };
        public static readonly IDiagnosticMessage Type_0_does_not_satisfy_the_constraint_1 = new DiagnosticMessage { Code = 2344, Category = DiagnosticCategory.Error, Key = "Type_0_does_not_satisfy_the_constraint_1_2344", Message = "Type '{0}' does not satisfy the constraint '{1}'." };
        public static readonly IDiagnosticMessage Argument_of_type_0_is_not_assignable_to_parameter_of_type_1 = new DiagnosticMessage { Code = 2345, Category = DiagnosticCategory.Error, Key = "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_2345", Message = "Argument of type '{0}' is not assignable to parameter of type '{1}'." };
        public static readonly IDiagnosticMessage Supplied_parameters_do_not_match_any_signature_of_call_target = new DiagnosticMessage { Code = 2346, Category = DiagnosticCategory.Error, Key = "Supplied_parameters_do_not_match_any_signature_of_call_target_2346", Message = "Supplied parameters do not match any signature of call target." };
        public static readonly IDiagnosticMessage Untyped_function_calls_may_not_accept_type_arguments = new DiagnosticMessage { Code = 2347, Category = DiagnosticCategory.Error, Key = "Untyped_function_calls_may_not_accept_type_arguments_2347", Message = "Untyped function calls may not accept type arguments." };
        public static readonly IDiagnosticMessage Value_of_type_0_is_not_callable_Did_you_mean_to_include_new = new DiagnosticMessage { Code = 2348, Category = DiagnosticCategory.Error, Key = "Value_of_type_0_is_not_callable_Did_you_mean_to_include_new_2348", Message = "Value of type '{0}' is not callable. Did you mean to include 'new'?" };
        public static readonly IDiagnosticMessage Cannot_invoke_an_expression_whose_type_lacks_a_call_signature = new DiagnosticMessage { Code = 2349, Category = DiagnosticCategory.Error, Key = "Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_2349", Message = "Cannot invoke an expression whose type lacks a call signature." };
        public static readonly IDiagnosticMessage Only_a_void_function_can_be_called_with_the_new_keyword = new DiagnosticMessage { Code = 2350, Category = DiagnosticCategory.Error, Key = "Only_a_void_function_can_be_called_with_the_new_keyword_2350", Message = "Only a void function can be called with the 'new' keyword." };
        public static readonly IDiagnosticMessage Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature = new DiagnosticMessage { Code = 2351, Category = DiagnosticCategory.Error, Key = "Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature_2351", Message = "Cannot use 'new' with an expression whose type lacks a call or construct signature." };
        public static readonly IDiagnosticMessage Neither_type_0_nor_type_1_is_assignable_to_the_other = new DiagnosticMessage { Code = 2352, Category = DiagnosticCategory.Error, Key = "Neither_type_0_nor_type_1_is_assignable_to_the_other_2352", Message = "Neither type '{0}' nor type '{1}' is assignable to the other." };
        public static readonly IDiagnosticMessage Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1 = new DiagnosticMessage { Code = 2353, Category = DiagnosticCategory.Error, Key = "Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353", Message = "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'." };
        public static readonly IDiagnosticMessage No_best_common_type_exists_among_return_expressions = new DiagnosticMessage { Code = 2354, Category = DiagnosticCategory.Error, Key = "No_best_common_type_exists_among_return_expressions_2354", Message = "No best common type exists among return expressions." };
        public static readonly IDiagnosticMessage A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value = new DiagnosticMessage { Code = 2355, Category = DiagnosticCategory.Error, Key = "A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_2355", Message = "A function whose declared type is neither 'void' nor 'any' must return a value." };
        public static readonly IDiagnosticMessage An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type = new DiagnosticMessage { Code = 2356, Category = DiagnosticCategory.Error, Key = "An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type_2356", Message = "An arithmetic operand must be of type 'any', 'number' or an enum type." };
        public static readonly IDiagnosticMessage The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer = new DiagnosticMessage { Code = 2357, Category = DiagnosticCategory.Error, Key = "The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer_2357", Message = "The operand of an increment or decrement operator must be a variable, property or indexer." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter = new DiagnosticMessage { Code = 2358, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_paramete_2358", Message = "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter." };
        public static readonly IDiagnosticMessage The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type = new DiagnosticMessage { Code = 2359, Category = DiagnosticCategory.Error, Key = "The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_F_2359", Message = "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol = new DiagnosticMessage { Code = 2360, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol_2360", Message = "The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'." };
        public static readonly IDiagnosticMessage The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter = new DiagnosticMessage { Code = 2361, Category = DiagnosticCategory.Error, Key = "The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter_2361", Message = "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter" };
        public static readonly IDiagnosticMessage The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type = new DiagnosticMessage { Code = 2362, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type_2362", Message = "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." };
        public static readonly IDiagnosticMessage The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type = new DiagnosticMessage { Code = 2363, Category = DiagnosticCategory.Error, Key = "The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type_2363", Message = "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." };
        public static readonly IDiagnosticMessage Invalid_left_hand_side_of_assignment_expression = new DiagnosticMessage { Code = 2364, Category = DiagnosticCategory.Error, Key = "Invalid_left_hand_side_of_assignment_expression_2364", Message = "Invalid left-hand side of assignment expression." };
        public static readonly IDiagnosticMessage Operator_0_cannot_be_applied_to_types_1_and_2 = new DiagnosticMessage { Code = 2365, Category = DiagnosticCategory.Error, Key = "Operator_0_cannot_be_applied_to_types_1_and_2_2365", Message = "Operator '{0}' cannot be applied to types '{1}' and '{2}'." };
        public static readonly IDiagnosticMessage Type_parameter_name_cannot_be_0 = new DiagnosticMessage { Code = 2368, Category = DiagnosticCategory.Error, Key = "Type_parameter_name_cannot_be_0_2368", Message = "Type parameter name cannot be '{0}'" };
        public static readonly IDiagnosticMessage A_parameter_property_is_only_allowed_in_a_constructor_implementation = new DiagnosticMessage { Code = 2369, Category = DiagnosticCategory.Error, Key = "A_parameter_property_is_only_allowed_in_a_constructor_implementation_2369", Message = "A parameter property is only allowed in a constructor implementation." };
        public static readonly IDiagnosticMessage A_rest_parameter_must_be_of_an_array_type = new DiagnosticMessage { Code = 2370, Category = DiagnosticCategory.Error, Key = "A_rest_parameter_must_be_of_an_array_type_2370", Message = "A rest parameter must be of an array type." };
        public static readonly IDiagnosticMessage A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation = new DiagnosticMessage { Code = 2371, Category = DiagnosticCategory.Error, Key = "A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation_2371", Message = "A parameter initializer is only allowed in a function or constructor implementation." };
        public static readonly IDiagnosticMessage Parameter_0_cannot_be_referenced_in_its_initializer = new DiagnosticMessage { Code = 2372, Category = DiagnosticCategory.Error, Key = "Parameter_0_cannot_be_referenced_in_its_initializer_2372", Message = "Parameter '{0}' cannot be referenced in its initializer." };
        public static readonly IDiagnosticMessage Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it = new DiagnosticMessage { Code = 2373, Category = DiagnosticCategory.Error, Key = "Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it_2373", Message = "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it." };
        public static readonly IDiagnosticMessage Duplicate_string_index_signature = new DiagnosticMessage { Code = 2374, Category = DiagnosticCategory.Error, Key = "Duplicate_string_index_signature_2374", Message = "Duplicate string index signature." };
        public static readonly IDiagnosticMessage Duplicate_number_index_signature = new DiagnosticMessage { Code = 2375, Category = DiagnosticCategory.Error, Key = "Duplicate_number_index_signature_2375", Message = "Duplicate number index signature." };
        public static readonly IDiagnosticMessage A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties = new DiagnosticMessage { Code = 2376, Category = DiagnosticCategory.Error, Key = "A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_proper_2376", Message = "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties." };
        public static readonly IDiagnosticMessage Constructors_for_derived_classes_must_contain_a_super_call = new DiagnosticMessage { Code = 2377, Category = DiagnosticCategory.Error, Key = "Constructors_for_derived_classes_must_contain_a_super_call_2377", Message = "Constructors for derived classes must contain a 'super' call." };
        public static readonly IDiagnosticMessage A_get_accessor_must_return_a_value = new DiagnosticMessage { Code = 2378, Category = DiagnosticCategory.Error, Key = "A_get_accessor_must_return_a_value_2378", Message = "A 'get' accessor must return a value." };
        public static readonly IDiagnosticMessage Getter_and_setter_accessors_do_not_agree_in_visibility = new DiagnosticMessage { Code = 2379, Category = DiagnosticCategory.Error, Key = "Getter_and_setter_accessors_do_not_agree_in_visibility_2379", Message = "Getter and setter accessors do not agree in visibility." };
        public static readonly IDiagnosticMessage Get_and_set_accessor_must_have_the_same_type = new DiagnosticMessage { Code = 2380, Category = DiagnosticCategory.Error, Key = "get_and_set_accessor_must_have_the_same_type_2380", Message = "'get' and 'set' accessor must have the same type." };
        public static readonly IDiagnosticMessage A_signature_with_an_implementation_cannot_use_a_string_literal_type = new DiagnosticMessage { Code = 2381, Category = DiagnosticCategory.Error, Key = "A_signature_with_an_implementation_cannot_use_a_string_literal_type_2381", Message = "A signature with an implementation cannot use a string literal type." };
        public static readonly IDiagnosticMessage Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature = new DiagnosticMessage { Code = 2382, Category = DiagnosticCategory.Error, Key = "Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature_2382", Message = "Specialized overload signature is not assignable to any non-specialized signature." };
        public static readonly IDiagnosticMessage Overload_signatures_must_all_be_exported_or_not_exported = new DiagnosticMessage { Code = 2383, Category = DiagnosticCategory.Error, Key = "Overload_signatures_must_all_be_exported_or_not_exported_2383", Message = "Overload signatures must all be exported or not exported." };
        public static readonly IDiagnosticMessage Overload_signatures_must_all_be_ambient_or_non_ambient = new DiagnosticMessage { Code = 2384, Category = DiagnosticCategory.Error, Key = "Overload_signatures_must_all_be_ambient_or_non_ambient_2384", Message = "Overload signatures must all be ambient or non-ambient." };
        public static readonly IDiagnosticMessage Overload_signatures_must_all_be_public_private_or_protected = new DiagnosticMessage { Code = 2385, Category = DiagnosticCategory.Error, Key = "Overload_signatures_must_all_be_public_private_or_protected_2385", Message = "Overload signatures must all be public, private or protected." };
        public static readonly IDiagnosticMessage Overload_signatures_must_all_be_optional_or_required = new DiagnosticMessage { Code = 2386, Category = DiagnosticCategory.Error, Key = "Overload_signatures_must_all_be_optional_or_required_2386", Message = "Overload signatures must all be optional or required." };
        public static readonly IDiagnosticMessage Function_overload_must_be_static = new DiagnosticMessage { Code = 2387, Category = DiagnosticCategory.Error, Key = "Function_overload_must_be_static_2387", Message = "Function overload must be static." };
        public static readonly IDiagnosticMessage Function_overload_must_not_be_static = new DiagnosticMessage { Code = 2388, Category = DiagnosticCategory.Error, Key = "Function_overload_must_not_be_static_2388", Message = "Function overload must not be static." };
        public static readonly IDiagnosticMessage Function_implementation_name_must_be_0 = new DiagnosticMessage { Code = 2389, Category = DiagnosticCategory.Error, Key = "Function_implementation_name_must_be_0_2389", Message = "Function implementation name must be '{0}'." };
        public static readonly IDiagnosticMessage Constructor_implementation_is_missing = new DiagnosticMessage { Code = 2390, Category = DiagnosticCategory.Error, Key = "Constructor_implementation_is_missing_2390", Message = "Constructor implementation is missing." };
        public static readonly IDiagnosticMessage Function_implementation_is_missing_or_not_immediately_following_the_declaration = new DiagnosticMessage { Code = 2391, Category = DiagnosticCategory.Error, Key = "Function_implementation_is_missing_or_not_immediately_following_the_declaration_2391", Message = "Function implementation is missing or not immediately following the declaration." };
        public static readonly IDiagnosticMessage Multiple_constructor_implementations_are_not_allowed = new DiagnosticMessage { Code = 2392, Category = DiagnosticCategory.Error, Key = "Multiple_constructor_implementations_are_not_allowed_2392", Message = "Multiple constructor implementations are not allowed." };
        public static readonly IDiagnosticMessage Duplicate_function_implementation = new DiagnosticMessage { Code = 2393, Category = DiagnosticCategory.Error, Key = "Duplicate_function_implementation_2393", Message = "Duplicate function implementation." };
        public static readonly IDiagnosticMessage Overload_signature_is_not_compatible_with_function_implementation = new DiagnosticMessage { Code = 2394, Category = DiagnosticCategory.Error, Key = "Overload_signature_is_not_compatible_with_function_implementation_2394", Message = "Overload signature is not compatible with function implementation." };
        public static readonly IDiagnosticMessage Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = new DiagnosticMessage { Code = 2395, Category = DiagnosticCategory.Error, Key = "Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local_2395", Message = "Individual declarations in merged declaration '{0}' must be all exported or all local." };
        public static readonly IDiagnosticMessage Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters = new DiagnosticMessage { Code = 2396, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters_2396", Message = "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters." };
        public static readonly IDiagnosticMessage Declaration_name_conflicts_with_built_in_global_identifier_0 = new DiagnosticMessage { Code = 2397, Category = DiagnosticCategory.Error, Key = "Declaration_name_conflicts_with_built_in_global_identifier_0_2397", Message = "Declaration name conflicts with built-in global identifier '{0}'." };
        public static readonly IDiagnosticMessage Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference = new DiagnosticMessage { Code = 2399, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference_2399", Message = "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference." };
        public static readonly IDiagnosticMessage Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference = new DiagnosticMessage { Code = 2400, Category = DiagnosticCategory.Error, Key = "Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference_2400", Message = "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference." };
        public static readonly IDiagnosticMessage Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference = new DiagnosticMessage { Code = 2401, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference_2401", Message = "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference." };
        public static readonly IDiagnosticMessage Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference = new DiagnosticMessage { Code = 2402, Category = DiagnosticCategory.Error, Key = "Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference_2402", Message = "Expression resolves to '_super' that compiler uses to capture base class reference." };
        public static readonly IDiagnosticMessage Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2 = new DiagnosticMessage { Code = 2403, Category = DiagnosticCategory.Error, Key = "Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_t_2403", Message = "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation = new DiagnosticMessage { Code = 2404, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation_2404", Message = "The left-hand side of a 'for...in' statement cannot use a type annotation." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any = new DiagnosticMessage { Code = 2405, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any_2405", Message = "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'." };
        public static readonly IDiagnosticMessage Invalid_left_hand_side_in_for_in_statement = new DiagnosticMessage { Code = 2406, Category = DiagnosticCategory.Error, Key = "Invalid_left_hand_side_in_for_in_statement_2406", Message = "Invalid left-hand side in 'for...in' statement." };
        public static readonly IDiagnosticMessage The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter = new DiagnosticMessage { Code = 2407, Category = DiagnosticCategory.Error, Key = "The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_2407", Message = "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter." };
        public static readonly IDiagnosticMessage Setters_cannot_return_a_value = new DiagnosticMessage { Code = 2408, Category = DiagnosticCategory.Error, Key = "Setters_cannot_return_a_value_2408", Message = "Setters cannot return a value." };
        public static readonly IDiagnosticMessage Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class = new DiagnosticMessage { Code = 2409, Category = DiagnosticCategory.Error, Key = "Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class_2409", Message = "Return type of constructor signature must be assignable to the instance type of the class" };
        public static readonly IDiagnosticMessage All_symbols_within_a_with_block_will_be_resolved_to_any = new DiagnosticMessage { Code = 2410, Category = DiagnosticCategory.Error, Key = "All_symbols_within_a_with_block_will_be_resolved_to_any_2410", Message = "All symbols within a 'with' block will be resolved to 'any'." };
        public static readonly IDiagnosticMessage Property_0_of_type_1_is_not_assignable_to_string_index_type_2 = new DiagnosticMessage { Code = 2411, Category = DiagnosticCategory.Error, Key = "Property_0_of_type_1_is_not_assignable_to_string_index_type_2_2411", Message = "Property '{0}' of type '{1}' is not assignable to string index type '{2}'." };
        public static readonly IDiagnosticMessage Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2 = new DiagnosticMessage { Code = 2412, Category = DiagnosticCategory.Error, Key = "Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2_2412", Message = "Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'." };
        public static readonly IDiagnosticMessage Numeric_index_type_0_is_not_assignable_to_string_index_type_1 = new DiagnosticMessage { Code = 2413, Category = DiagnosticCategory.Error, Key = "Numeric_index_type_0_is_not_assignable_to_string_index_type_1_2413", Message = "Numeric index type '{0}' is not assignable to string index type '{1}'." };
        public static readonly IDiagnosticMessage Class_name_cannot_be_0 = new DiagnosticMessage { Code = 2414, Category = DiagnosticCategory.Error, Key = "Class_name_cannot_be_0_2414", Message = "Class name cannot be '{0}'" };
        public static readonly IDiagnosticMessage Class_0_incorrectly_extends_base_class_1 = new DiagnosticMessage { Code = 2415, Category = DiagnosticCategory.Error, Key = "Class_0_incorrectly_extends_base_class_1_2415", Message = "Class '{0}' incorrectly extends base class '{1}'." };
        public static readonly IDiagnosticMessage Class_static_side_0_incorrectly_extends_base_class_static_side_1 = new DiagnosticMessage { Code = 2417, Category = DiagnosticCategory.Error, Key = "Class_static_side_0_incorrectly_extends_base_class_static_side_1_2417", Message = "Class static side '{0}' incorrectly extends base class static side '{1}'." };
        public static readonly IDiagnosticMessage Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0 = new DiagnosticMessage { Code = 2419, Category = DiagnosticCategory.Error, Key = "Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0_2419", Message = "Type name '{0}' in extends clause does not reference constructor function for '{0}'." };
        public static readonly IDiagnosticMessage Class_0_incorrectly_implements_interface_1 = new DiagnosticMessage { Code = 2420, Category = DiagnosticCategory.Error, Key = "Class_0_incorrectly_implements_interface_1_2420", Message = "Class '{0}' incorrectly implements interface '{1}'." };
        public static readonly IDiagnosticMessage A_class_may_only_implement_another_class_or_interface = new DiagnosticMessage { Code = 2422, Category = DiagnosticCategory.Error, Key = "A_class_may_only_implement_another_class_or_interface_2422", Message = "A class may only implement another class or interface." };
        public static readonly IDiagnosticMessage Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor = new DiagnosticMessage { Code = 2423, Category = DiagnosticCategory.Error, Key = "Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_access_2423", Message = "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor." };
        public static readonly IDiagnosticMessage Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property = new DiagnosticMessage { Code = 2424, Category = DiagnosticCategory.Error, Key = "Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_proper_2424", Message = "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property." };
        public static readonly IDiagnosticMessage Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function = new DiagnosticMessage { Code = 2425, Category = DiagnosticCategory.Error, Key = "Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_functi_2425", Message = "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function." };
        public static readonly IDiagnosticMessage Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function = new DiagnosticMessage { Code = 2426, Category = DiagnosticCategory.Error, Key = "Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_functi_2426", Message = "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function." };
        public static readonly IDiagnosticMessage Interface_name_cannot_be_0 = new DiagnosticMessage { Code = 2427, Category = DiagnosticCategory.Error, Key = "Interface_name_cannot_be_0_2427", Message = "Interface name cannot be '{0}'" };
        public static readonly IDiagnosticMessage All_declarations_of_an_interface_must_have_identical_type_parameters = new DiagnosticMessage { Code = 2428, Category = DiagnosticCategory.Error, Key = "All_declarations_of_an_interface_must_have_identical_type_parameters_2428", Message = "All declarations of an interface must have identical type parameters." };
        public static readonly IDiagnosticMessage Interface_0_incorrectly_extends_interface_1 = new DiagnosticMessage { Code = 2430, Category = DiagnosticCategory.Error, Key = "Interface_0_incorrectly_extends_interface_1_2430", Message = "Interface '{0}' incorrectly extends interface '{1}'." };
        public static readonly IDiagnosticMessage Enum_name_cannot_be_0 = new DiagnosticMessage { Code = 2431, Category = DiagnosticCategory.Error, Key = "Enum_name_cannot_be_0_2431", Message = "Enum name cannot be '{0}'" };
        public static readonly IDiagnosticMessage In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element = new DiagnosticMessage { Code = 2432, Category = DiagnosticCategory.Error, Key = "In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enu_2432", Message = "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element." };
        public static readonly IDiagnosticMessage A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged = new DiagnosticMessage { Code = 2433, Category = DiagnosticCategory.Error, Key = "A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merg_2433", Message = "A namespace declaration cannot be in a different file from a class or function with which it is merged" };
        public static readonly IDiagnosticMessage A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = new DiagnosticMessage { Code = 2434, Category = DiagnosticCategory.Error, Key = "A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged_2434", Message = "A namespace declaration cannot be located prior to a class or function with which it is merged" };
        public static readonly IDiagnosticMessage Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces = new DiagnosticMessage { Code = 2435, Category = DiagnosticCategory.Error, Key = "Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces_2435", Message = "Ambient modules cannot be nested in other modules or namespaces." };
        public static readonly IDiagnosticMessage Ambient_module_declaration_cannot_specify_relative_module_name = new DiagnosticMessage { Code = 2436, Category = DiagnosticCategory.Error, Key = "Ambient_module_declaration_cannot_specify_relative_module_name_2436", Message = "Ambient module declaration cannot specify relative module name." };
        public static readonly IDiagnosticMessage Module_0_is_hidden_by_a_local_declaration_with_the_same_name = new DiagnosticMessage { Code = 2437, Category = DiagnosticCategory.Error, Key = "Module_0_is_hidden_by_a_local_declaration_with_the_same_name_2437", Message = "Module '{0}' is hidden by a local declaration with the same name" };
        public static readonly IDiagnosticMessage Import_name_cannot_be_0 = new DiagnosticMessage { Code = 2438, Category = DiagnosticCategory.Error, Key = "Import_name_cannot_be_0_2438", Message = "Import name cannot be '{0}'" };
        public static readonly IDiagnosticMessage Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name = new DiagnosticMessage { Code = 2439, Category = DiagnosticCategory.Error, Key = "Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relati_2439", Message = "Import or export declaration in an ambient module declaration cannot reference module through relative module name." };
        public static readonly IDiagnosticMessage Import_declaration_conflicts_with_local_declaration_of_0 = new DiagnosticMessage { Code = 2440, Category = DiagnosticCategory.Error, Key = "Import_declaration_conflicts_with_local_declaration_of_0_2440", Message = "Import declaration conflicts with local declaration of '{0}'" };
        public static readonly IDiagnosticMessage Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module = new DiagnosticMessage { Code = 2441, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_2441", Message = "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module." };
        public static readonly IDiagnosticMessage Types_have_separate_declarations_of_a_private_property_0 = new DiagnosticMessage { Code = 2442, Category = DiagnosticCategory.Error, Key = "Types_have_separate_declarations_of_a_private_property_0_2442", Message = "Types have separate declarations of a private property '{0}'." };
        public static readonly IDiagnosticMessage Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2 = new DiagnosticMessage { Code = 2443, Category = DiagnosticCategory.Error, Key = "Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2_2443", Message = "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'." };
        public static readonly IDiagnosticMessage Property_0_is_protected_in_type_1_but_public_in_type_2 = new DiagnosticMessage { Code = 2444, Category = DiagnosticCategory.Error, Key = "Property_0_is_protected_in_type_1_but_public_in_type_2_2444", Message = "Property '{0}' is protected in type '{1}' but public in type '{2}'." };
        public static readonly IDiagnosticMessage Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = new DiagnosticMessage { Code = 2445, Category = DiagnosticCategory.Error, Key = "Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses_2445", Message = "Property '{0}' is protected and only accessible within class '{1}' and its subclasses." };
        public static readonly IDiagnosticMessage Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1 = new DiagnosticMessage { Code = 2446, Category = DiagnosticCategory.Error, Key = "Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_2446", Message = "Property '{0}' is protected and only accessible through an instance of class '{1}'." };
        public static readonly IDiagnosticMessage The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead = new DiagnosticMessage { Code = 2447, Category = DiagnosticCategory.Error, Key = "The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead_2447", Message = "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead." };
        public static readonly IDiagnosticMessage Block_scoped_variable_0_used_before_its_declaration = new DiagnosticMessage { Code = 2448, Category = DiagnosticCategory.Error, Key = "Block_scoped_variable_0_used_before_its_declaration_2448", Message = "Block-scoped variable '{0}' used before its declaration." };
        public static readonly IDiagnosticMessage The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant = new DiagnosticMessage { Code = 2449, Category = DiagnosticCategory.Error, Key = "The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant_2449", Message = "The operand of an increment or decrement operator cannot be a constant." };
        public static readonly IDiagnosticMessage Left_hand_side_of_assignment_expression_cannot_be_a_constant = new DiagnosticMessage { Code = 2450, Category = DiagnosticCategory.Error, Key = "Left_hand_side_of_assignment_expression_cannot_be_a_constant_2450", Message = "Left-hand side of assignment expression cannot be a constant." };
        public static readonly IDiagnosticMessage Cannot_redeclare_block_scoped_variable_0 = new DiagnosticMessage { Code = 2451, Category = DiagnosticCategory.Error, Key = "Cannot_redeclare_block_scoped_variable_0_2451", Message = "Cannot redeclare block-scoped variable '{0}'." };
        public static readonly IDiagnosticMessage An_enum_member_cannot_have_a_numeric_name = new DiagnosticMessage { Code = 2452, Category = DiagnosticCategory.Error, Key = "An_enum_member_cannot_have_a_numeric_name_2452", Message = "An enum member cannot have a numeric name." };
        public static readonly IDiagnosticMessage The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = new DiagnosticMessage { Code = 2453, Category = DiagnosticCategory.Error, Key = "The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_typ_2453", Message = "The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly." };
        public static readonly IDiagnosticMessage Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0 = new DiagnosticMessage { Code = 2455, Category = DiagnosticCategory.Error, Key = "Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0_2455", Message = "Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'." };
        public static readonly IDiagnosticMessage Type_alias_0_circularly_references_itself = new DiagnosticMessage { Code = 2456, Category = DiagnosticCategory.Error, Key = "Type_alias_0_circularly_references_itself_2456", Message = "Type alias '{0}' circularly references itself." };
        public static readonly IDiagnosticMessage Type_alias_name_cannot_be_0 = new DiagnosticMessage { Code = 2457, Category = DiagnosticCategory.Error, Key = "Type_alias_name_cannot_be_0_2457", Message = "Type alias name cannot be '{0}'" };
        public static readonly IDiagnosticMessage An_AMD_module_cannot_have_multiple_name_assignments = new DiagnosticMessage { Code = 2458, Category = DiagnosticCategory.Error, Key = "An_AMD_module_cannot_have_multiple_name_assignments_2458", Message = "An AMD module cannot have multiple name assignments." };
        public static readonly IDiagnosticMessage Type_0_has_no_property_1_and_no_string_index_signature = new DiagnosticMessage { Code = 2459, Category = DiagnosticCategory.Error, Key = "Type_0_has_no_property_1_and_no_string_index_signature_2459", Message = "Type '{0}' has no property '{1}' and no string index signature." };
        public static readonly IDiagnosticMessage Type_0_has_no_property_1 = new DiagnosticMessage { Code = 2460, Category = DiagnosticCategory.Error, Key = "Type_0_has_no_property_1_2460", Message = "Type '{0}' has no property '{1}'." };
        public static readonly IDiagnosticMessage Type_0_is_not_an_array_type = new DiagnosticMessage { Code = 2461, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_an_array_type_2461", Message = "Type '{0}' is not an array type." };
        public static readonly IDiagnosticMessage A_rest_element_must_be_last_in_an_array_destructuring_pattern = new DiagnosticMessage { Code = 2462, Category = DiagnosticCategory.Error, Key = "A_rest_element_must_be_last_in_an_array_destructuring_pattern_2462", Message = "A rest element must be last in an array destructuring pattern" };
        public static readonly IDiagnosticMessage A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature = new DiagnosticMessage { Code = 2463, Category = DiagnosticCategory.Error, Key = "A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature_2463", Message = "A binding pattern parameter cannot be optional in an implementation signature." };
        public static readonly IDiagnosticMessage A_computed_property_name_must_be_of_type_string_number_symbol_or_any = new DiagnosticMessage { Code = 2464, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_must_be_of_type_string_number_symbol_or_any_2464", Message = "A computed property name must be of type 'string', 'number', 'symbol', or 'any'." };
        public static readonly IDiagnosticMessage This_cannot_be_referenced_in_a_computed_property_name = new DiagnosticMessage { Code = 2465, Category = DiagnosticCategory.Error, Key = "this_cannot_be_referenced_in_a_computed_property_name_2465", Message = "'this' cannot be referenced in a computed property name." };
        public static readonly IDiagnosticMessage Super_cannot_be_referenced_in_a_computed_property_name = new DiagnosticMessage { Code = 2466, Category = DiagnosticCategory.Error, Key = "super_cannot_be_referenced_in_a_computed_property_name_2466", Message = "'super' cannot be referenced in a computed property name." };
        public static readonly IDiagnosticMessage A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type = new DiagnosticMessage { Code = 2467, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type_2467", Message = "A computed property name cannot reference a type parameter from its containing type." };
        public static readonly IDiagnosticMessage Cannot_find_global_value_0 = new DiagnosticMessage { Code = 2468, Category = DiagnosticCategory.Error, Key = "Cannot_find_global_value_0_2468", Message = "Cannot find global value '{0}'." };
        public static readonly IDiagnosticMessage The_0_operator_cannot_be_applied_to_type_symbol = new DiagnosticMessage { Code = 2469, Category = DiagnosticCategory.Error, Key = "The_0_operator_cannot_be_applied_to_type_symbol_2469", Message = "The '{0}' operator cannot be applied to type 'symbol'." };
        public static readonly IDiagnosticMessage Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object = new DiagnosticMessage { Code = 2470, Category = DiagnosticCategory.Error, Key = "Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object_2470", Message = "'Symbol' reference does not refer to the global Symbol constructor object." };
        public static readonly IDiagnosticMessage A_computed_property_name_of_the_form_0_must_be_of_type_symbol = new DiagnosticMessage { Code = 2471, Category = DiagnosticCategory.Error, Key = "A_computed_property_name_of_the_form_0_must_be_of_type_symbol_2471", Message = "A computed property name of the form '{0}' must be of type 'symbol'." };
        public static readonly IDiagnosticMessage Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher = new DiagnosticMessage { Code = 2472, Category = DiagnosticCategory.Error, Key = "Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher_2472", Message = "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher." };
        public static readonly IDiagnosticMessage Enum_declarations_must_all_be_const_or_non_const = new DiagnosticMessage { Code = 2473, Category = DiagnosticCategory.Error, Key = "Enum_declarations_must_all_be_const_or_non_const_2473", Message = "Enum declarations must all be const or non-const." };
        public static readonly IDiagnosticMessage In_const_enum_declarations_member_initializer_must_be_constant_expression = new DiagnosticMessage { Code = 2474, Category = DiagnosticCategory.Error, Key = "In_const_enum_declarations_member_initializer_must_be_constant_expression_2474", Message = "In 'const' enum declarations member initializer must be constant expression." };
        public static readonly IDiagnosticMessage Const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment = new DiagnosticMessage { Code = 2475, Category = DiagnosticCategory.Error, Key = "const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_im_2475", Message = "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment." };
        public static readonly IDiagnosticMessage A_const_enum_member_can_only_be_accessed_using_a_string_literal = new DiagnosticMessage { Code = 2476, Category = DiagnosticCategory.Error, Key = "A_const_enum_member_can_only_be_accessed_using_a_string_literal_2476", Message = "A const enum member can only be accessed using a string literal." };
        public static readonly IDiagnosticMessage Const_enum_member_initializer_was_evaluated_to_a_non_finite_value = new DiagnosticMessage { Code = 2477, Category = DiagnosticCategory.Error, Key = "const_enum_member_initializer_was_evaluated_to_a_non_finite_value_2477", Message = "'const' enum member initializer was evaluated to a non-finite value." };
        public static readonly IDiagnosticMessage Const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN = new DiagnosticMessage { Code = 2478, Category = DiagnosticCategory.Error, Key = "const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN_2478", Message = "'const' enum member initializer was evaluated to disallowed value 'NaN'." };
        public static readonly IDiagnosticMessage Property_0_does_not_exist_on_const_enum_1 = new DiagnosticMessage { Code = 2479, Category = DiagnosticCategory.Error, Key = "Property_0_does_not_exist_on_const_enum_1_2479", Message = "Property '{0}' does not exist on 'const' enum '{1}'." };
        public static readonly IDiagnosticMessage Let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations = new DiagnosticMessage { Code = 2480, Category = DiagnosticCategory.Error, Key = "let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations_2480", Message = "'let' is not allowed to be used as a name in 'let' or 'const' declarations." };
        public static readonly IDiagnosticMessage Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1 = new DiagnosticMessage { Code = 2481, Category = DiagnosticCategory.Error, Key = "Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1_2481", Message = "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation = new DiagnosticMessage { Code = 2483, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation_2483", Message = "The left-hand side of a 'for...of' statement cannot use a type annotation." };
        public static readonly IDiagnosticMessage Export_declaration_conflicts_with_exported_declaration_of_0 = new DiagnosticMessage { Code = 2484, Category = DiagnosticCategory.Error, Key = "Export_declaration_conflicts_with_exported_declaration_of_0_2484", Message = "Export declaration conflicts with exported declaration of '{0}'" };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant = new DiagnosticMessage { Code = 2485, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant_2485", Message = "The left-hand side of a 'for...of' statement cannot be a previously defined constant." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant = new DiagnosticMessage { Code = 2486, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant_2486", Message = "The left-hand side of a 'for...in' statement cannot be a previously defined constant." };
        public static readonly IDiagnosticMessage Invalid_left_hand_side_in_for_of_statement = new DiagnosticMessage { Code = 2487, Category = DiagnosticCategory.Error, Key = "Invalid_left_hand_side_in_for_of_statement_2487", Message = "Invalid left-hand side in 'for...of' statement." };
        public static readonly IDiagnosticMessage Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator = new DiagnosticMessage { Code = 2488, Category = DiagnosticCategory.Error, Key = "Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator_2488", Message = "Type must have a '[Symbol.iterator]()' method that returns an iterator." };
        public static readonly IDiagnosticMessage An_iterator_must_have_a_next_method = new DiagnosticMessage { Code = 2489, Category = DiagnosticCategory.Error, Key = "An_iterator_must_have_a_next_method_2489", Message = "An iterator must have a 'next()' method." };
        public static readonly IDiagnosticMessage The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property = new DiagnosticMessage { Code = 2490, Category = DiagnosticCategory.Error, Key = "The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property_2490", Message = "The type returned by the 'next()' method of an iterator must have a 'value' property." };
        public static readonly IDiagnosticMessage The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern = new DiagnosticMessage { Code = 2491, Category = DiagnosticCategory.Error, Key = "The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern_2491", Message = "The left-hand side of a 'for...in' statement cannot be a destructuring pattern." };
        public static readonly IDiagnosticMessage Cannot_redeclare_identifier_0_in_catch_clause = new DiagnosticMessage { Code = 2492, Category = DiagnosticCategory.Error, Key = "Cannot_redeclare_identifier_0_in_catch_clause_2492", Message = "Cannot redeclare identifier '{0}' in catch clause" };
        public static readonly IDiagnosticMessage Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2 = new DiagnosticMessage { Code = 2493, Category = DiagnosticCategory.Error, Key = "Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2_2493", Message = "Tuple type '{0}' with length '{1}' cannot be assigned to tuple with length '{2}'." };
        public static readonly IDiagnosticMessage Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher = new DiagnosticMessage { Code = 2494, Category = DiagnosticCategory.Error, Key = "Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher_2494", Message = "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher." };
        public static readonly IDiagnosticMessage Type_0_is_not_an_array_type_or_a_string_type = new DiagnosticMessage { Code = 2495, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_an_array_type_or_a_string_type_2495", Message = "Type '{0}' is not an array type or a string type." };
        public static readonly IDiagnosticMessage The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression = new DiagnosticMessage { Code = 2496, Category = DiagnosticCategory.Error, Key = "The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_stand_2496", Message = "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression." };
        public static readonly IDiagnosticMessage Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct = new DiagnosticMessage { Code = 2497, Category = DiagnosticCategory.Error, Key = "Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct_2497", Message = "Module '{0}' resolves to a non-module entity and cannot be imported using this construct." };
        public static readonly IDiagnosticMessage Module_0_uses_export_and_cannot_be_used_with_export_Asterisk = new DiagnosticMessage { Code = 2498, Category = DiagnosticCategory.Error, Key = "Module_0_uses_export_and_cannot_be_used_with_export_Asterisk_2498", Message = "Module '{0}' uses 'export =' and cannot be used with 'export *'." };
        public static readonly IDiagnosticMessage An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments = new DiagnosticMessage { Code = 2499, Category = DiagnosticCategory.Error, Key = "An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments_2499", Message = "An interface can only extend an identifier/qualified-name with optional type arguments." };
        public static readonly IDiagnosticMessage A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments = new DiagnosticMessage { Code = 2500, Category = DiagnosticCategory.Error, Key = "A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments_2500", Message = "A class can only implement an identifier/qualified-name with optional type arguments." };
        public static readonly IDiagnosticMessage A_rest_element_cannot_contain_a_binding_pattern = new DiagnosticMessage { Code = 2501, Category = DiagnosticCategory.Error, Key = "A_rest_element_cannot_contain_a_binding_pattern_2501", Message = "A rest element cannot contain a binding pattern." };
        public static readonly IDiagnosticMessage Zero_is_referenced_directly_or_indirectly_in_its_own_type_annotation = new DiagnosticMessage { Code = 2502, Category = DiagnosticCategory.Error, Key = "_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation_2502", Message = "'{0}' is referenced directly or indirectly in its own type annotation." };
        public static readonly IDiagnosticMessage Cannot_find_namespace_0 = new DiagnosticMessage { Code = 2503, Category = DiagnosticCategory.Error, Key = "Cannot_find_namespace_0_2503", Message = "Cannot find namespace '{0}'." };
        public static readonly IDiagnosticMessage No_best_common_type_exists_among_yield_expressions = new DiagnosticMessage { Code = 2504, Category = DiagnosticCategory.Error, Key = "No_best_common_type_exists_among_yield_expressions_2504", Message = "No best common type exists among yield expressions." };
        public static readonly IDiagnosticMessage A_generator_cannot_have_a_void_type_annotation = new DiagnosticMessage { Code = 2505, Category = DiagnosticCategory.Error, Key = "A_generator_cannot_have_a_void_type_annotation_2505", Message = "A generator cannot have a 'void' type annotation." };
        public static readonly IDiagnosticMessage Zero_is_referenced_directly_or_indirectly_in_its_own_base_expression = new DiagnosticMessage { Code = 2506, Category = DiagnosticCategory.Error, Key = "_0_is_referenced_directly_or_indirectly_in_its_own_base_expression_2506", Message = "'{0}' is referenced directly or indirectly in its own base expression." };
        public static readonly IDiagnosticMessage Type_0_is_not_a_constructor_function_type = new DiagnosticMessage { Code = 2507, Category = DiagnosticCategory.Error, Key = "Type_0_is_not_a_constructor_function_type_2507", Message = "Type '{0}' is not a constructor function type." };
        public static readonly IDiagnosticMessage No_base_constructor_has_the_specified_number_of_type_arguments = new DiagnosticMessage { Code = 2508, Category = DiagnosticCategory.Error, Key = "No_base_constructor_has_the_specified_number_of_type_arguments_2508", Message = "No base constructor has the specified number of type arguments." };
        public static readonly IDiagnosticMessage Base_constructor_return_type_0_is_not_a_class_or_interface_type = new DiagnosticMessage { Code = 2509, Category = DiagnosticCategory.Error, Key = "Base_constructor_return_type_0_is_not_a_class_or_interface_type_2509", Message = "Base constructor return type '{0}' is not a class or interface type." };
        public static readonly IDiagnosticMessage Base_constructors_must_all_have_the_same_return_type = new DiagnosticMessage { Code = 2510, Category = DiagnosticCategory.Error, Key = "Base_constructors_must_all_have_the_same_return_type_2510", Message = "Base constructors must all have the same return type." };
        public static readonly IDiagnosticMessage Cannot_create_an_instance_of_the_abstract_class_0 = new DiagnosticMessage { Code = 2511, Category = DiagnosticCategory.Error, Key = "Cannot_create_an_instance_of_the_abstract_class_0_2511", Message = "Cannot create an instance of the abstract class '{0}'." };
        public static readonly IDiagnosticMessage Overload_signatures_must_all_be_abstract_or_not_abstract = new DiagnosticMessage { Code = 2512, Category = DiagnosticCategory.Error, Key = "Overload_signatures_must_all_be_abstract_or_not_abstract_2512", Message = "Overload signatures must all be abstract or not abstract." };
        public static readonly IDiagnosticMessage Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression = new DiagnosticMessage { Code = 2513, Category = DiagnosticCategory.Error, Key = "Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression_2513", Message = "Abstract method '{0}' in class '{1}' cannot be accessed via super expression." };
        public static readonly IDiagnosticMessage Classes_containing_abstract_methods_must_be_marked_abstract = new DiagnosticMessage { Code = 2514, Category = DiagnosticCategory.Error, Key = "Classes_containing_abstract_methods_must_be_marked_abstract_2514", Message = "Classes containing abstract methods must be marked abstract." };
        public static readonly IDiagnosticMessage Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2 = new DiagnosticMessage { Code = 2515, Category = DiagnosticCategory.Error, Key = "Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2_2515", Message = "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'." };
        public static readonly IDiagnosticMessage All_declarations_of_an_abstract_method_must_be_consecutive = new DiagnosticMessage { Code = 2516, Category = DiagnosticCategory.Error, Key = "All_declarations_of_an_abstract_method_must_be_consecutive_2516", Message = "All declarations of an abstract method must be consecutive." };
        public static readonly IDiagnosticMessage Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type = new DiagnosticMessage { Code = 2517, Category = DiagnosticCategory.Error, Key = "Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type_2517", Message = "Cannot assign an abstract constructor type to a non-abstract constructor type." };
        public static readonly IDiagnosticMessage A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard = new DiagnosticMessage { Code = 2518, Category = DiagnosticCategory.Error, Key = "A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard_2518", Message = "A 'this'-based type guard is not compatible with a parameter-based type guard." };
        public static readonly IDiagnosticMessage A_this_based_type_predicate_is_only_allowed_within_a_class_or_interface_s_members_get_accessors_or_return_type_positions_for_functions_and_methods = new DiagnosticMessage { Code = 2519, Category = DiagnosticCategory.Error, Key = "A_this_based_type_predicate_is_only_allowed_within_a_class_or_interface_s_members_get_accessors_or_r_2519", Message = "A 'this'-based type predicate is only allowed within a class or interface's members, get accessors, or return type positions for functions and methods." };
        public static readonly IDiagnosticMessage Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions = new DiagnosticMessage { Code = 2520, Category = DiagnosticCategory.Error, Key = "Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions_2520", Message = "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions." };
        public static readonly IDiagnosticMessage Expression_resolves_to_variable_declaration_0_that_compiler_uses_to_support_async_functions = new DiagnosticMessage { Code = 2521, Category = DiagnosticCategory.Error, Key = "Expression_resolves_to_variable_declaration_0_that_compiler_uses_to_support_async_functions_2521", Message = "Expression resolves to variable declaration '{0}' that compiler uses to support async functions." };
        public static readonly IDiagnosticMessage The_arguments_object_cannot_be_referenced_in_an_async_arrow_function_Consider_using_a_standard_async_function_expression = new DiagnosticMessage { Code = 2522, Category = DiagnosticCategory.Error, Key = "The_arguments_object_cannot_be_referenced_in_an_async_arrow_function_Consider_using_a_standard_async_2522", Message = "The 'arguments' object cannot be referenced in an async arrow function. Consider using a standard async function expression." };
        public static readonly IDiagnosticMessage Yield_expressions_cannot_be_used_in_a_parameter_initializer = new DiagnosticMessage { Code = 2523, Category = DiagnosticCategory.Error, Key = "yield_expressions_cannot_be_used_in_a_parameter_initializer_2523", Message = "'yield' expressions cannot be used in a parameter initializer." };
        public static readonly IDiagnosticMessage Await_expressions_cannot_be_used_in_a_parameter_initializer = new DiagnosticMessage { Code = 2524, Category = DiagnosticCategory.Error, Key = "await_expressions_cannot_be_used_in_a_parameter_initializer_2524", Message = "'await' expressions cannot be used in a parameter initializer." };
        public static readonly IDiagnosticMessage Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value = new DiagnosticMessage { Code = 2525, Category = DiagnosticCategory.Error, Key = "Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value_2525", Message = "Initializer provides no value for this binding element and the binding element has no default value." };
        public static readonly IDiagnosticMessage A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface = new DiagnosticMessage { Code = 2526, Category = DiagnosticCategory.Error, Key = "A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface_2526", Message = "A 'this' type is available only in a non-static member of a class or interface." };
        public static readonly IDiagnosticMessage The_inferred_type_of_0_references_an_inaccessible_this_type_A_type_annotation_is_necessary = new DiagnosticMessage { Code = 2527, Category = DiagnosticCategory.Error, Key = "The_inferred_type_of_0_references_an_inaccessible_this_type_A_type_annotation_is_necessary_2527", Message = "The inferred type of '{0}' references an inaccessible 'this' type. A type annotation is necessary." };
        public static readonly IDiagnosticMessage A_module_cannot_have_multiple_default_exports = new DiagnosticMessage { Code = 2528, Category = DiagnosticCategory.Error, Key = "A_module_cannot_have_multiple_default_exports_2528", Message = "A module cannot have multiple default exports." };
        public static readonly IDiagnosticMessage JSX_element_attributes_type_0_must_be_an_object_type = new DiagnosticMessage { Code = 2600, Category = DiagnosticCategory.Error, Key = "JSX_element_attributes_type_0_must_be_an_object_type_2600", Message = "JSX element attributes type '{0}' must be an object type." };
        public static readonly IDiagnosticMessage The_return_type_of_a_JSX_element_constructor_must_return_an_object_type = new DiagnosticMessage { Code = 2601, Category = DiagnosticCategory.Error, Key = "The_return_type_of_a_JSX_element_constructor_must_return_an_object_type_2601", Message = "The return type of a JSX element constructor must return an object type." };
        public static readonly IDiagnosticMessage JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist = new DiagnosticMessage { Code = 2602, Category = DiagnosticCategory.Error, Key = "JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist_2602", Message = "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist." };
        public static readonly IDiagnosticMessage Property_0_in_type_1_is_not_assignable_to_type_2 = new DiagnosticMessage { Code = 2603, Category = DiagnosticCategory.Error, Key = "Property_0_in_type_1_is_not_assignable_to_type_2_2603", Message = "Property '{0}' in type '{1}' is not assignable to type '{2}'" };
        public static readonly IDiagnosticMessage JSX_element_type_0_does_not_have_any_construct_or_call_signatures = new DiagnosticMessage { Code = 2604, Category = DiagnosticCategory.Error, Key = "JSX_element_type_0_does_not_have_any_construct_or_call_signatures_2604", Message = "JSX element type '{0}' does not have any construct or call signatures." };
        public static readonly IDiagnosticMessage JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements = new DiagnosticMessage { Code = 2605, Category = DiagnosticCategory.Error, Key = "JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements_2605", Message = "JSX element type '{0}' is not a constructor function for JSX elements." };
        public static readonly IDiagnosticMessage Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property = new DiagnosticMessage { Code = 2606, Category = DiagnosticCategory.Error, Key = "Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property_2606", Message = "Property '{0}' of JSX spread attribute is not assignable to target property." };
        public static readonly IDiagnosticMessage JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property = new DiagnosticMessage { Code = 2607, Category = DiagnosticCategory.Error, Key = "JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property_2607", Message = "JSX element class does not support attributes because it does not have a '{0}' property" };
        public static readonly IDiagnosticMessage The_global_type_JSX_0_may_not_have_more_than_one_property = new DiagnosticMessage { Code = 2608, Category = DiagnosticCategory.Error, Key = "The_global_type_JSX_0_may_not_have_more_than_one_property_2608", Message = "The global type 'JSX.{0}' may not have more than one property" };
        public static readonly IDiagnosticMessage Cannot_emit_namespaced_JSX_elements_in_React = new DiagnosticMessage { Code = 2650, Category = DiagnosticCategory.Error, Key = "Cannot_emit_namespaced_JSX_elements_in_React_2650", Message = "Cannot emit namespaced JSX elements in React" };
        public static readonly IDiagnosticMessage A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = new DiagnosticMessage { Code = 2651, Category = DiagnosticCategory.Error, Key = "A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_memb_2651", Message = "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums." };
        public static readonly IDiagnosticMessage Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead = new DiagnosticMessage { Code = 2652, Category = DiagnosticCategory.Error, Key = "Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_d_2652", Message = "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead." };
        public static readonly IDiagnosticMessage Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1 = new DiagnosticMessage { Code = 2653, Category = DiagnosticCategory.Error, Key = "Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1_2653", Message = "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'." };
        public static readonly IDiagnosticMessage Exported_external_package_typings_file_cannot_contain_tripleslash_references_Please_contact_the_package_author_to_update_the_package_definition = new DiagnosticMessage { Code = 2654, Category = DiagnosticCategory.Error, Key = "Exported_external_package_typings_file_cannot_contain_tripleslash_references_Please_contact_the_pack_2654", Message = "Exported external package typings file cannot contain tripleslash references. Please contact the package author to update the package definition." };
        public static readonly IDiagnosticMessage Exported_external_package_typings_file_0_is_not_a_module_Please_contact_the_package_author_to_update_the_package_definition = new DiagnosticMessage { Code = 2656, Category = DiagnosticCategory.Error, Key = "Exported_external_package_typings_file_0_is_not_a_module_Please_contact_the_package_author_to_update_2656", Message = "Exported external package typings file '{0}' is not a module. Please contact the package author to update the package definition." };
        public static readonly IDiagnosticMessage JSX_expressions_must_have_one_parent_element = new DiagnosticMessage { Code = 2657, Category = DiagnosticCategory.Error, Key = "JSX_expressions_must_have_one_parent_element_2657", Message = "JSX expressions must have one parent element" };
        public static readonly IDiagnosticMessage Type_0_provides_no_match_for_the_signature_1 = new DiagnosticMessage { Code = 2658, Category = DiagnosticCategory.Error, Key = "Type_0_provides_no_match_for_the_signature_1_2658", Message = "Type '{0}' provides no match for the signature '{1}'" };
        public static readonly IDiagnosticMessage Import_declaration_0_is_using_private_name_1 = new DiagnosticMessage { Code = 4000, Category = DiagnosticCategory.Error, Key = "Import_declaration_0_is_using_private_name_1_4000", Message = "Import declaration '{0}' is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4002, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_exported_class_has_or_is_using_private_name_1_4002", Message = "Type parameter '{0}' of exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4004, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1_4004", Message = "Type parameter '{0}' of exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4006, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4006", Message = "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4008, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4008", Message = "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4010, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4010", Message = "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4012, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4012", Message = "Type parameter '{0}' of public method from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4014, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4014", Message = "Type parameter '{0}' of method from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Type_parameter_0_of_exported_function_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4016, Category = DiagnosticCategory.Error, Key = "Type_parameter_0_of_exported_function_has_or_is_using_private_name_1_4016", Message = "Type parameter '{0}' of exported function has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Implements_clause_of_exported_class_0_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4019, Category = DiagnosticCategory.Error, Key = "Implements_clause_of_exported_class_0_has_or_is_using_private_name_1_4019", Message = "Implements clause of exported class '{0}' has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Extends_clause_of_exported_class_0_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4020, Category = DiagnosticCategory.Error, Key = "Extends_clause_of_exported_class_0_has_or_is_using_private_name_1_4020", Message = "Extends clause of exported class '{0}' has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4022, Category = DiagnosticCategory.Error, Key = "Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1_4022", Message = "Extends clause of exported interface '{0}' has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4023, Category = DiagnosticCategory.Error, Key = "Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4023", Message = "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Exported_variable_0_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4024, Category = DiagnosticCategory.Error, Key = "Exported_variable_0_has_or_is_using_name_1_from_private_module_2_4024", Message = "Exported variable '{0}' has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Exported_variable_0_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4025, Category = DiagnosticCategory.Error, Key = "Exported_variable_0_has_or_is_using_private_name_1_4025", Message = "Exported variable '{0}' has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4026, Category = DiagnosticCategory.Error, Key = "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot__4026", Message = "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4027, Category = DiagnosticCategory.Error, Key = "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4027", Message = "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Public_static_property_0_of_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4028, Category = DiagnosticCategory.Error, Key = "Public_static_property_0_of_exported_class_has_or_is_using_private_name_1_4028", Message = "Public static property '{0}' of exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4029, Category = DiagnosticCategory.Error, Key = "Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_name_4029", Message = "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4030, Category = DiagnosticCategory.Error, Key = "Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4030", Message = "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Public_property_0_of_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4031, Category = DiagnosticCategory.Error, Key = "Public_property_0_of_exported_class_has_or_is_using_private_name_1_4031", Message = "Public property '{0}' of exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4032, Category = DiagnosticCategory.Error, Key = "Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4032", Message = "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Property_0_of_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4033, Category = DiagnosticCategory.Error, Key = "Property_0_of_exported_interface_has_or_is_using_private_name_1_4033", Message = "Property '{0}' of exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4034, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_4034", Message = "Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4035, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1_4035", Message = "Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4036, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_4036", Message = "Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4037, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1_4037", Message = "Parameter '{0}' of public property setter from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named = new DiagnosticMessage { Code = 4038, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_externa_4038", Message = "Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4039, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_4039", Message = "Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4040, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0_4040", Message = "Return type of public static property getter from exported class has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named = new DiagnosticMessage { Code = 4041, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_modul_4041", Message = "Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." };
        public static readonly IDiagnosticMessage Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4042, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_4042", Message = "Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4043, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0_4043", Message = "Return type of public property getter from exported class has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4044, Category = DiagnosticCategory.Error, Key = "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_mod_4044", Message = "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4045, Category = DiagnosticCategory.Error, Key = "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0_4045", Message = "Return type of constructor signature from exported interface has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4046, Category = DiagnosticCategory.Error, Key = "Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4046", Message = "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4047, Category = DiagnosticCategory.Error, Key = "Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0_4047", Message = "Return type of call signature from exported interface has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4048, Category = DiagnosticCategory.Error, Key = "Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4048", Message = "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4049, Category = DiagnosticCategory.Error, Key = "Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0_4049", Message = "Return type of index signature from exported interface has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named = new DiagnosticMessage { Code = 4050, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module__4050", Message = "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4051, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4051", Message = "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4052, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0_4052", Message = "Return type of public static method from exported class has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named = new DiagnosticMessage { Code = 4053, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_c_4053", Message = "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named." };
        public static readonly IDiagnosticMessage Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4054, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4054", Message = "Return type of public method from exported class has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4055, Category = DiagnosticCategory.Error, Key = "Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0_4055", Message = "Return type of public method from exported class has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4056, Category = DiagnosticCategory.Error, Key = "Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4056", Message = "Return type of method from exported interface has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4057, Category = DiagnosticCategory.Error, Key = "Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0_4057", Message = "Return type of method from exported interface has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named = new DiagnosticMessage { Code = 4058, Category = DiagnosticCategory.Error, Key = "Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named_4058", Message = "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named." };
        public static readonly IDiagnosticMessage Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1 = new DiagnosticMessage { Code = 4059, Category = DiagnosticCategory.Error, Key = "Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1_4059", Message = "Return type of exported function has or is using name '{0}' from private module '{1}'." };
        public static readonly IDiagnosticMessage Return_type_of_exported_function_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4060, Category = DiagnosticCategory.Error, Key = "Return_type_of_exported_function_has_or_is_using_private_name_0_4060", Message = "Return type of exported function has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4061, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_can_4061", Message = "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4062, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2_4062", Message = "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4063, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1_4063", Message = "Parameter '{0}' of constructor from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4064, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_mod_4064", Message = "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4065, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4065", Message = "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4066, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4066", Message = "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4067, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4067", Message = "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4068, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module__4068", Message = "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4069, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4069", Message = "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4070, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4070", Message = "Parameter '{0}' of public static method from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4071, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_c_4071", Message = "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4072, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4072", Message = "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4073, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4073", Message = "Parameter '{0}' of public method from exported class has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4074, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4074", Message = "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4075, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4075", Message = "Parameter '{0}' of method from exported interface has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named = new DiagnosticMessage { Code = 4076, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4076", Message = "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named." };
        public static readonly IDiagnosticMessage Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2 = new DiagnosticMessage { Code = 4077, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2_4077", Message = "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'." };
        public static readonly IDiagnosticMessage Parameter_0_of_exported_function_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4078, Category = DiagnosticCategory.Error, Key = "Parameter_0_of_exported_function_has_or_is_using_private_name_1_4078", Message = "Parameter '{0}' of exported function has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Exported_type_alias_0_has_or_is_using_private_name_1 = new DiagnosticMessage { Code = 4081, Category = DiagnosticCategory.Error, Key = "Exported_type_alias_0_has_or_is_using_private_name_1_4081", Message = "Exported type alias '{0}' has or is using private name '{1}'." };
        public static readonly IDiagnosticMessage Default_export_of_the_module_has_or_is_using_private_name_0 = new DiagnosticMessage { Code = 4082, Category = DiagnosticCategory.Error, Key = "Default_export_of_the_module_has_or_is_using_private_name_0_4082", Message = "Default export of the module has or is using private name '{0}'." };
        public static readonly IDiagnosticMessage The_current_host_does_not_support_the_0_option = new DiagnosticMessage { Code = 5001, Category = DiagnosticCategory.Error, Key = "The_current_host_does_not_support_the_0_option_5001", Message = "The current host does not support the '{0}' option." };
        public static readonly IDiagnosticMessage Cannot_find_the_common_subdirectory_path_for_the_input_files = new DiagnosticMessage { Code = 5009, Category = DiagnosticCategory.Error, Key = "Cannot_find_the_common_subdirectory_path_for_the_input_files_5009", Message = "Cannot find the common subdirectory path for the input files." };
        public static readonly IDiagnosticMessage Cannot_read_file_0_Colon_1 = new DiagnosticMessage { Code = 5012, Category = DiagnosticCategory.Error, Key = "Cannot_read_file_0_Colon_1_5012", Message = "Cannot read file '{0}': {1}" };
        public static readonly IDiagnosticMessage Unsupported_file_encoding = new DiagnosticMessage { Code = 5013, Category = DiagnosticCategory.Error, Key = "Unsupported_file_encoding_5013", Message = "Unsupported file encoding." };
        public static readonly IDiagnosticMessage Failed_to_parse_file_0_Colon_1 = new DiagnosticMessage { Code = 5014, Category = DiagnosticCategory.Error, Key = "Failed_to_parse_file_0_Colon_1_5014", Message = "Failed to parse file '{0}': {1}." };
        public static readonly IDiagnosticMessage Unknown_compiler_option_0 = new DiagnosticMessage { Code = 5023, Category = DiagnosticCategory.Error, Key = "Unknown_compiler_option_0_5023", Message = "Unknown compiler option '{0}'." };
        public static readonly IDiagnosticMessage Compiler_option_0_requires_a_value_of_type_1 = new DiagnosticMessage { Code = 5024, Category = DiagnosticCategory.Error, Key = "Compiler_option_0_requires_a_value_of_type_1_5024", Message = "Compiler option '{0}' requires a value of type {1}." };
        public static readonly IDiagnosticMessage Could_not_write_file_0_Colon_1 = new DiagnosticMessage { Code = 5033, Category = DiagnosticCategory.Error, Key = "Could_not_write_file_0_Colon_1_5033", Message = "Could not write file '{0}': {1}" };
        public static readonly IDiagnosticMessage Option_project_cannot_be_mixed_with_source_files_on_a_command_line = new DiagnosticMessage { Code = 5042, Category = DiagnosticCategory.Error, Key = "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", Message = "Option 'project' cannot be mixed with source files on a command line." };
        public static readonly IDiagnosticMessage Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher = new DiagnosticMessage { Code = 5047, Category = DiagnosticCategory.Error, Key = "Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES_5047", Message = "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher." };
        public static readonly IDiagnosticMessage Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided = new DiagnosticMessage { Code = 5051, Category = DiagnosticCategory.Error, Key = "Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_prov_5051", Message = "Option 'inlineSources' can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided." };
        public static readonly IDiagnosticMessage Option_0_cannot_be_specified_without_specifying_option_1 = new DiagnosticMessage { Code = 5052, Category = DiagnosticCategory.Error, Key = "Option_0_cannot_be_specified_without_specifying_option_1_5052", Message = "Option '{0}' cannot be specified without specifying option '{1}'." };
        public static readonly IDiagnosticMessage Option_0_cannot_be_specified_with_option_1 = new DiagnosticMessage { Code = 5053, Category = DiagnosticCategory.Error, Key = "Option_0_cannot_be_specified_with_option_1_5053", Message = "Option '{0}' cannot be specified with option '{1}'." };
        public static readonly IDiagnosticMessage A_tsconfig_json_file_is_already_defined_at_Colon_0 = new DiagnosticMessage { Code = 5054, Category = DiagnosticCategory.Error, Key = "A_tsconfig_json_file_is_already_defined_at_Colon_0_5054", Message = "A 'tsconfig.json' file is already defined at: '{0}'." };
        public static readonly IDiagnosticMessage Cannot_write_file_0_because_it_would_overwrite_input_file = new DiagnosticMessage { Code = 5055, Category = DiagnosticCategory.Error, Key = "Cannot_write_file_0_because_it_would_overwrite_input_file_5055", Message = "Cannot write file '{0}' because it would overwrite input file." };
        public static readonly IDiagnosticMessage Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files = new DiagnosticMessage { Code = 5056, Category = DiagnosticCategory.Error, Key = "Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files_5056", Message = "Cannot write file '{0}' because it would be overwritten by multiple input files." };
        public static readonly IDiagnosticMessage Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0 = new DiagnosticMessage { Code = 5057, Category = DiagnosticCategory.Error, Key = "Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0_5057", Message = "Cannot find a tsconfig.json file at the specified directory: '{0}'" };
        public static readonly IDiagnosticMessage The_specified_path_does_not_exist_Colon_0 = new DiagnosticMessage { Code = 5058, Category = DiagnosticCategory.Error, Key = "The_specified_path_does_not_exist_Colon_0_5058", Message = "The specified path does not exist: '{0}'" };
        public static readonly IDiagnosticMessage Concatenate_and_emit_output_to_single_file = new DiagnosticMessage { Code = 6001, Category = DiagnosticCategory.Message, Key = "Concatenate_and_emit_output_to_single_file_6001", Message = "Concatenate and emit output to single file." };
        public static readonly IDiagnosticMessage Generates_corresponding_d_ts_file = new DiagnosticMessage { Code = 6002, Category = DiagnosticCategory.Message, Key = "Generates_corresponding_d_ts_file_6002", Message = "Generates corresponding '.d.ts' file." };
        public static readonly IDiagnosticMessage Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations = new DiagnosticMessage { Code = 6003, Category = DiagnosticCategory.Message, Key = "Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations_6003", Message = "Specifies the location where debugger should locate map files instead of generated locations." };
        public static readonly IDiagnosticMessage Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations = new DiagnosticMessage { Code = 6004, Category = DiagnosticCategory.Message, Key = "Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations_6004", Message = "Specifies the location where debugger should locate TypeScript files instead of source locations." };
        public static readonly IDiagnosticMessage Watch_input_files = new DiagnosticMessage { Code = 6005, Category = DiagnosticCategory.Message, Key = "Watch_input_files_6005", Message = "Watch input files." };
        public static readonly IDiagnosticMessage Redirect_output_structure_to_the_directory = new DiagnosticMessage { Code = 6006, Category = DiagnosticCategory.Message, Key = "Redirect_output_structure_to_the_directory_6006", Message = "Redirect output structure to the directory." };
        public static readonly IDiagnosticMessage Do_not_erase_const_enum_declarations_in_generated_code = new DiagnosticMessage { Code = 6007, Category = DiagnosticCategory.Message, Key = "Do_not_erase_const_enum_declarations_in_generated_code_6007", Message = "Do not erase const enum declarations in generated code." };
        public static readonly IDiagnosticMessage Do_not_emit_outputs_if_any_errors_were_reported = new DiagnosticMessage { Code = 6008, Category = DiagnosticCategory.Message, Key = "Do_not_emit_outputs_if_any_errors_were_reported_6008", Message = "Do not emit outputs if any errors were reported." };
        public static readonly IDiagnosticMessage Do_not_emit_comments_to_output = new DiagnosticMessage { Code = 6009, Category = DiagnosticCategory.Message, Key = "Do_not_emit_comments_to_output_6009", Message = "Do not emit comments to output." };
        public static readonly IDiagnosticMessage Do_not_emit_outputs = new DiagnosticMessage { Code = 6010, Category = DiagnosticCategory.Message, Key = "Do_not_emit_outputs_6010", Message = "Do not emit outputs." };
        public static readonly IDiagnosticMessage Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking = new DiagnosticMessage { Code = 6011, Category = DiagnosticCategory.Message, Key = "Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typech_6011", Message = "Allow default imports from modules with no default export. This does not affect code emit, just typechecking." };
        public static readonly IDiagnosticMessage Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES2015_experimental = new DiagnosticMessage { Code = 6015, Category = DiagnosticCategory.Message, Key = "Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES2015_experimental_6015", Message = "Specify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES2015' (experimental)" };
        public static readonly IDiagnosticMessage Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es2015 = new DiagnosticMessage { Code = 6016, Category = DiagnosticCategory.Message, Key = "Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es2015_6016", Message = "Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'" };
        public static readonly IDiagnosticMessage Print_this_message = new DiagnosticMessage { Code = 6017, Category = DiagnosticCategory.Message, Key = "Print_this_message_6017", Message = "Print this message." };
        public static readonly IDiagnosticMessage Print_the_compiler_s_version = new DiagnosticMessage { Code = 6019, Category = DiagnosticCategory.Message, Key = "Print_the_compiler_s_version_6019", Message = "Print the compiler's version." };
        public static readonly IDiagnosticMessage Compile_the_project_in_the_given_directory = new DiagnosticMessage { Code = 6020, Category = DiagnosticCategory.Message, Key = "Compile_the_project_in_the_given_directory_6020", Message = "Compile the project in the given directory." };
        public static readonly IDiagnosticMessage Syntax_Colon_0 = new DiagnosticMessage { Code = 6023, Category = DiagnosticCategory.Message, Key = "Syntax_Colon_0_6023", Message = "Syntax: {0}" };
        public static readonly IDiagnosticMessage Options = new DiagnosticMessage { Code = 6024, Category = DiagnosticCategory.Message, Key = "options_6024", Message = "options" };
        public static readonly IDiagnosticMessage Examples_Colon_0 = new DiagnosticMessage { Code = 6026, Category = DiagnosticCategory.Message, Key = "Examples_Colon_0_6026", Message = "Examples: {0}" };
        public static readonly IDiagnosticMessage Options_Colon = new DiagnosticMessage { Code = 6027, Category = DiagnosticCategory.Message, Key = "Options_Colon_6027", Message = "Options:" };
        public static readonly IDiagnosticMessage Version_0 = new DiagnosticMessage { Code = 6029, Category = DiagnosticCategory.Message, Key = "Version_0_6029", Message = "Version {0}" };
        public static readonly IDiagnosticMessage Insert_command_line_options_and_files_from_a_file = new DiagnosticMessage { Code = 6030, Category = DiagnosticCategory.Message, Key = "Insert_command_line_options_and_files_from_a_file_6030", Message = "Insert command line options and files from a file." };
        public static readonly IDiagnosticMessage File_change_detected_Starting_incremental_compilation = new DiagnosticMessage { Code = 6032, Category = DiagnosticCategory.Message, Key = "File_change_detected_Starting_incremental_compilation_6032", Message = "File change detected. Starting incremental compilation..." };
        public static readonly IDiagnosticMessage KIND = new DiagnosticMessage { Code = 6034, Category = DiagnosticCategory.Message, Key = "KIND_6034", Message = "KIND" };
        public static readonly IDiagnosticMessage VERSION = new DiagnosticMessage { Code = 6036, Category = DiagnosticCategory.Message, Key = "VERSION_6036", Message = "VERSION" };
        public static readonly IDiagnosticMessage LOCATION = new DiagnosticMessage { Code = 6037, Category = DiagnosticCategory.Message, Key = "LOCATION_6037", Message = "LOCATION" };
        public static readonly IDiagnosticMessage DIRECTORY = new DiagnosticMessage { Code = 6038, Category = DiagnosticCategory.Message, Key = "DIRECTORY_6038", Message = "DIRECTORY" };
        public static readonly IDiagnosticMessage Compilation_complete_Watching_for_file_changes = new DiagnosticMessage { Code = 6042, Category = DiagnosticCategory.Message, Key = "Compilation_complete_Watching_for_file_changes_6042", Message = "Compilation complete. Watching for file changes." };
        public static readonly IDiagnosticMessage Generates_corresponding_map_file = new DiagnosticMessage { Code = 6043, Category = DiagnosticCategory.Message, Key = "Generates_corresponding_map_file_6043", Message = "Generates corresponding '.map' file." };
        public static readonly IDiagnosticMessage Compiler_option_0_expects_an_argument = new DiagnosticMessage { Code = 6044, Category = DiagnosticCategory.Error, Key = "Compiler_option_0_expects_an_argument_6044", Message = "Compiler option '{0}' expects an argument." };
        public static readonly IDiagnosticMessage Unterminated_quoted_string_in_response_file_0 = new DiagnosticMessage { Code = 6045, Category = DiagnosticCategory.Error, Key = "Unterminated_quoted_string_in_response_file_0_6045", Message = "Unterminated quoted string in response file '{0}'." };
        public static readonly IDiagnosticMessage Argument_for_module_option_must_be_commonjs_amd_system_umd_or_es2015 = new DiagnosticMessage { Code = 6046, Category = DiagnosticCategory.Error, Key = "Argument_for_module_option_must_be_commonjs_amd_system_umd_or_es2015_6046", Message = "Argument for '--module' option must be 'commonjs', 'amd', 'system', 'umd', or 'es2015'." };
        public static readonly IDiagnosticMessage Argument_for_target_option_must_be_ES3_ES5_or_ES2015 = new DiagnosticMessage { Code = 6047, Category = DiagnosticCategory.Error, Key = "Argument_for_target_option_must_be_ES3_ES5_or_ES2015_6047", Message = "Argument for '--target' option must be 'ES3', 'ES5', or 'ES2015'." };
        public static readonly IDiagnosticMessage Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1 = new DiagnosticMessage { Code = 6048, Category = DiagnosticCategory.Error, Key = "Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1_6048", Message = "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'." };
        public static readonly IDiagnosticMessage Unsupported_locale_0 = new DiagnosticMessage { Code = 6049, Category = DiagnosticCategory.Error, Key = "Unsupported_locale_0_6049", Message = "Unsupported locale '{0}'." };
        public static readonly IDiagnosticMessage Unable_to_open_file_0 = new DiagnosticMessage { Code = 6050, Category = DiagnosticCategory.Error, Key = "Unable_to_open_file_0_6050", Message = "Unable to open file '{0}'." };
        public static readonly IDiagnosticMessage Corrupted_locale_file_0 = new DiagnosticMessage { Code = 6051, Category = DiagnosticCategory.Error, Key = "Corrupted_locale_file_0_6051", Message = "Corrupted locale file {0}." };
        public static readonly IDiagnosticMessage Raise_error_on_expressions_and_declarations_with_an_implied_any_type = new DiagnosticMessage { Code = 6052, Category = DiagnosticCategory.Message, Key = "Raise_error_on_expressions_and_declarations_with_an_implied_any_type_6052", Message = "Raise error on expressions and declarations with an implied 'any' type." };
        public static readonly IDiagnosticMessage File_0_not_found = new DiagnosticMessage { Code = 6053, Category = DiagnosticCategory.Error, Key = "File_0_not_found_6053", Message = "File '{0}' not found." };

        // TODO: dsc extension!
        public static readonly IDiagnosticMessage Failed_To_read_File_0_Error_1 = new DiagnosticMessage { Code = 6153, Category = DiagnosticCategory.Error, Key = "Failed_To_read_File_0_Error_1", Message = "Failed to read file '{0}': '{1}'." };
        public static readonly IDiagnosticMessage File_0_has_unsupported_extension_The_only_supported_extensions_are_1 = new DiagnosticMessage { Code = 6054, Category = DiagnosticCategory.Error, Key = "File_0_has_unsupported_extension_The_only_supported_extensions_are_1_6054", Message = "File '{0}' has unsupported extension. The only supported extensions are {1}." };
        public static readonly IDiagnosticMessage Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures = new DiagnosticMessage { Code = 6055, Category = DiagnosticCategory.Message, Key = "Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures_6055", Message = "Suppress noImplicitAny errors for indexing objects lacking index signatures." };
        public static readonly IDiagnosticMessage Do_not_emit_declarations_for_code_that_has_an_internal_annotation = new DiagnosticMessage { Code = 6056, Category = DiagnosticCategory.Message, Key = "Do_not_emit_declarations_for_code_that_has_an_internal_annotation_6056", Message = "Do not emit declarations for code that has an '@internal' annotation." };
        public static readonly IDiagnosticMessage Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir = new DiagnosticMessage { Code = 6058, Category = DiagnosticCategory.Message, Key = "Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDi_6058", Message = "Specifies the root directory of input files. Use to control the output directory structure with --outDir." };
        public static readonly IDiagnosticMessage File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files = new DiagnosticMessage { Code = 6059, Category = DiagnosticCategory.Error, Key = "File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files_6059", Message = "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files." };
        public static readonly IDiagnosticMessage Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix = new DiagnosticMessage { Code = 6060, Category = DiagnosticCategory.Message, Key = "Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", Message = "Specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)." };
        public static readonly IDiagnosticMessage NEWLINE = new DiagnosticMessage { Code = 6061, Category = DiagnosticCategory.Message, Key = "NEWLINE_6061", Message = "NEWLINE" };
        public static readonly IDiagnosticMessage Argument_for_newLine_option_must_be_CRLF_or_LF = new DiagnosticMessage { Code = 6062, Category = DiagnosticCategory.Error, Key = "Argument_for_newLine_option_must_be_CRLF_or_LF_6062", Message = "Argument for '--newLine' option must be 'CRLF' or 'LF'." };
        public static readonly IDiagnosticMessage Argument_for_moduleResolution_option_must_be_node_or_classic = new DiagnosticMessage { Code = 6063, Category = DiagnosticCategory.Error, Key = "Argument_for_moduleResolution_option_must_be_node_or_classic_6063", Message = "Argument for '--moduleResolution' option must be 'node' or 'classic'." };
        public static readonly IDiagnosticMessage Enables_experimental_support_for_ES7_decorators = new DiagnosticMessage { Code = 6065, Category = DiagnosticCategory.Message, Key = "Enables_experimental_support_for_ES7_decorators_6065", Message = "Enables experimental support for ES7 decorators." };
        public static readonly IDiagnosticMessage Enables_experimental_support_for_emitting_type_metadata_for_decorators = new DiagnosticMessage { Code = 6066, Category = DiagnosticCategory.Message, Key = "Enables_experimental_support_for_emitting_type_metadata_for_decorators_6066", Message = "Enables experimental support for emitting type metadata for decorators." };
        public static readonly IDiagnosticMessage Enables_experimental_support_for_ES7_async_functions = new DiagnosticMessage { Code = 6068, Category = DiagnosticCategory.Message, Key = "Enables_experimental_support_for_ES7_async_functions_6068", Message = "Enables experimental support for ES7 async functions." };
        public static readonly IDiagnosticMessage Specifies_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6 = new DiagnosticMessage { Code = 6069, Category = DiagnosticCategory.Message, Key = "Specifies_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6_6069", Message = "Specifies module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6)." };
        public static readonly IDiagnosticMessage Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file = new DiagnosticMessage { Code = 6070, Category = DiagnosticCategory.Message, Key = "Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file_6070", Message = "Initializes a TypeScript project and creates a tsconfig.json file." };
        public static readonly IDiagnosticMessage Successfully_created_a_tsconfig_json_file = new DiagnosticMessage { Code = 6071, Category = DiagnosticCategory.Message, Key = "Successfully_created_a_tsconfig_json_file_6071", Message = "Successfully created a tsconfig.json file." };
        public static readonly IDiagnosticMessage Suppress_excess_property_checks_for_object_literals = new DiagnosticMessage { Code = 6072, Category = DiagnosticCategory.Message, Key = "Suppress_excess_property_checks_for_object_literals_6072", Message = "Suppress excess property checks for object literals." };
        public static readonly IDiagnosticMessage Stylize_errors_and_messages_using_color_and_context_experimental = new DiagnosticMessage { Code = 6073, Category = DiagnosticCategory.Message, Key = "Stylize_errors_and_messages_using_color_and_context_experimental_6073", Message = "Stylize errors and messages using color and context. (experimental)" };
        public static readonly IDiagnosticMessage Do_not_report_errors_on_unused_labels = new DiagnosticMessage { Code = 6074, Category = DiagnosticCategory.Message, Key = "Do_not_report_errors_on_unused_labels_6074", Message = "Do not report errors on unused labels." };
        public static readonly IDiagnosticMessage Report_error_when_not_all_code_paths_in_function_return_a_value = new DiagnosticMessage { Code = 6075, Category = DiagnosticCategory.Message, Key = "Report_error_when_not_all_code_paths_in_function_return_a_value_6075", Message = "Report error when not all code paths in function return a value." };
        public static readonly IDiagnosticMessage Report_errors_for_fallthrough_cases_in_switch_statement = new DiagnosticMessage { Code = 6076, Category = DiagnosticCategory.Message, Key = "Report_errors_for_fallthrough_cases_in_switch_statement_6076", Message = "Report errors for fallthrough cases in switch statement." };
        public static readonly IDiagnosticMessage Do_not_report_errors_on_unreachable_code = new DiagnosticMessage { Code = 6077, Category = DiagnosticCategory.Message, Key = "Do_not_report_errors_on_unreachable_code_6077", Message = "Do not report errors on unreachable code." };
        public static readonly IDiagnosticMessage Disallow_inconsistently_cased_references_to_the_same_file = new DiagnosticMessage { Code = 6078, Category = DiagnosticCategory.Message, Key = "Disallow_inconsistently_cased_references_to_the_same_file_6078", Message = "Disallow inconsistently-cased references to the same file." };
        public static readonly IDiagnosticMessage Specify_JSX_code_generation_Colon_preserve_or_react = new DiagnosticMessage { Code = 6080, Category = DiagnosticCategory.Message, Key = "Specify_JSX_code_generation_Colon_preserve_or_react_6080", Message = "Specify JSX code generation: 'preserve' or 'react'" };
        public static readonly IDiagnosticMessage Argument_for_jsx_must_be_preserve_or_react = new DiagnosticMessage { Code = 6081, Category = DiagnosticCategory.Message, Key = "Argument_for_jsx_must_be_preserve_or_react_6081", Message = "Argument for '--jsx' must be 'preserve' or 'react'." };
        public static readonly IDiagnosticMessage Only_amd_and_system_modules_are_supported_alongside_0 = new DiagnosticMessage { Code = 6082, Category = DiagnosticCategory.Error, Key = "Only_amd_and_system_modules_are_supported_alongside_0_6082", Message = "Only 'amd' and 'system' modules are supported alongside --{0}." };
        public static readonly IDiagnosticMessage Allow_javascript_files_to_be_compiled = new DiagnosticMessage { Code = 6083, Category = DiagnosticCategory.Message, Key = "Allow_javascript_files_to_be_compiled_6083", Message = "Allow javascript files to be compiled." };
        public static readonly IDiagnosticMessage Variable_0_implicitly_has_an_1_type = new DiagnosticMessage { Code = 7005, Category = DiagnosticCategory.Error, Key = "Variable_0_implicitly_has_an_1_type_7005", Message = "Variable '{0}' implicitly has an '{1}' type." };
        public static readonly IDiagnosticMessage Parameter_0_implicitly_has_an_1_type = new DiagnosticMessage { Code = 7006, Category = DiagnosticCategory.Error, Key = "Parameter_0_implicitly_has_an_1_type_7006", Message = "Parameter '{0}' implicitly has an '{1}' type." };
        public static readonly IDiagnosticMessage Member_0_implicitly_has_an_1_type = new DiagnosticMessage { Code = 7008, Category = DiagnosticCategory.Error, Key = "Member_0_implicitly_has_an_1_type_7008", Message = "Member '{0}' implicitly has an '{1}' type." };
        public static readonly IDiagnosticMessage New_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type = new DiagnosticMessage { Code = 7009, Category = DiagnosticCategory.Error, Key = "new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type_7009", Message = "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type." };
        public static readonly IDiagnosticMessage Zero_which_lacks_return_type_annotation_implicitly_has_an_1_return_type = new DiagnosticMessage { Code = 7010, Category = DiagnosticCategory.Error, Key = "_0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type_7010", Message = "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type." };
        public static readonly IDiagnosticMessage Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type = new DiagnosticMessage { Code = 7011, Category = DiagnosticCategory.Error, Key = "Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7011", Message = "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type." };
        public static readonly IDiagnosticMessage Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type = new DiagnosticMessage { Code = 7013, Category = DiagnosticCategory.Error, Key = "Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7013", Message = "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type." };
        public static readonly IDiagnosticMessage Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation = new DiagnosticMessage { Code = 7016, Category = DiagnosticCategory.Error, Key = "Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation_7016", Message = "Property '{0}' implicitly has type 'any', because its 'set' accessor lacks a type annotation." };
        public static readonly IDiagnosticMessage Index_signature_of_object_type_implicitly_has_an_any_type = new DiagnosticMessage { Code = 7017, Category = DiagnosticCategory.Error, Key = "Index_signature_of_object_type_implicitly_has_an_any_type_7017", Message = "Index signature of object type implicitly has an 'any' type." };
        public static readonly IDiagnosticMessage Object_literal_s_property_0_implicitly_has_an_1_type = new DiagnosticMessage { Code = 7018, Category = DiagnosticCategory.Error, Key = "Object_literal_s_property_0_implicitly_has_an_1_type_7018", Message = "Object literal's property '{0}' implicitly has an '{1}' type." };
        public static readonly IDiagnosticMessage Rest_parameter_0_implicitly_has_an_any_type = new DiagnosticMessage { Code = 7019, Category = DiagnosticCategory.Error, Key = "Rest_parameter_0_implicitly_has_an_any_type_7019", Message = "Rest parameter '{0}' implicitly has an 'any[]' type." };
        public static readonly IDiagnosticMessage Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type = new DiagnosticMessage { Code = 7020, Category = DiagnosticCategory.Error, Key = "Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7020", Message = "Call signature, which lacks return-type annotation, implicitly has an 'any' return type." };
        public static readonly IDiagnosticMessage Zero_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer = new DiagnosticMessage { Code = 7022, Category = DiagnosticCategory.Error, Key = "_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or__7022", Message = "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer." };
        public static readonly IDiagnosticMessage Zero_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions = new DiagnosticMessage { Code = 7023, Category = DiagnosticCategory.Error, Key = "_0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_reference_7023", Message = "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." };
        public static readonly IDiagnosticMessage Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions = new DiagnosticMessage { Code = 7024, Category = DiagnosticCategory.Error, Key = "Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_ref_7024", Message = "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." };
        public static readonly IDiagnosticMessage Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type = new DiagnosticMessage { Code = 7025, Category = DiagnosticCategory.Error, Key = "Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_typ_7025", Message = "Generator implicitly has type '{0}' because it does not yield any values. Consider supplying a return type." };
        public static readonly IDiagnosticMessage JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists = new DiagnosticMessage { Code = 7026, Category = DiagnosticCategory.Error, Key = "JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists_7026", Message = "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists" };
        public static readonly IDiagnosticMessage Unreachable_code_detected = new DiagnosticMessage { Code = 7027, Category = DiagnosticCategory.Error, Key = "Unreachable_code_detected_7027", Message = "Unreachable code detected." };
        public static readonly IDiagnosticMessage Unused_label = new DiagnosticMessage { Code = 7028, Category = DiagnosticCategory.Error, Key = "Unused_label_7028", Message = "Unused label." };
        public static readonly IDiagnosticMessage Fallthrough_case_in_switch = new DiagnosticMessage { Code = 7029, Category = DiagnosticCategory.Error, Key = "Fallthrough_case_in_switch_7029", Message = "Fallthrough case in switch." };
        public static readonly IDiagnosticMessage Not_all_code_paths_return_a_value = new DiagnosticMessage { Code = 7030, Category = DiagnosticCategory.Error, Key = "Not_all_code_paths_return_a_value_7030", Message = "Not all code paths return a value." };
        public static readonly IDiagnosticMessage You_cannot_rename_this_element = new DiagnosticMessage { Code = 8000, Category = DiagnosticCategory.Error, Key = "You_cannot_rename_this_element_8000", Message = "You cannot rename this element." };
        public static readonly IDiagnosticMessage You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library = new DiagnosticMessage { Code = 8001, Category = DiagnosticCategory.Error, Key = "You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library_8001", Message = "You cannot rename elements that are defined in the standard TypeScript library." };
        public static readonly IDiagnosticMessage Import_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8002, Category = DiagnosticCategory.Error, Key = "import_can_only_be_used_in_a_ts_file_8002", Message = "'import ... =' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Export_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8003, Category = DiagnosticCategory.Error, Key = "export_can_only_be_used_in_a_ts_file_8003", Message = "'export=' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Type_parameter_declarations_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8004, Category = DiagnosticCategory.Error, Key = "type_parameter_declarations_can_only_be_used_in_a_ts_file_8004", Message = "'type parameter declarations' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Implements_clauses_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8005, Category = DiagnosticCategory.Error, Key = "implements_clauses_can_only_be_used_in_a_ts_file_8005", Message = "'implements clauses' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Interface_declarations_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8006, Category = DiagnosticCategory.Error, Key = "interface_declarations_can_only_be_used_in_a_ts_file_8006", Message = "'interface declarations' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Module_declarations_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8007, Category = DiagnosticCategory.Error, Key = "module_declarations_can_only_be_used_in_a_ts_file_8007", Message = "'module declarations' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Type_aliases_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8008, Category = DiagnosticCategory.Error, Key = "type_aliases_can_only_be_used_in_a_ts_file_8008", Message = "'type aliases' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Zero_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8009, Category = DiagnosticCategory.Error, Key = "_0_can_only_be_used_in_a_ts_file_8009", Message = "'{0}' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Types_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8010, Category = DiagnosticCategory.Error, Key = "types_can_only_be_used_in_a_ts_file_8010", Message = "'types' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Type_arguments_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8011, Category = DiagnosticCategory.Error, Key = "type_arguments_can_only_be_used_in_a_ts_file_8011", Message = "'type arguments' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Parameter_modifiers_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8012, Category = DiagnosticCategory.Error, Key = "parameter_modifiers_can_only_be_used_in_a_ts_file_8012", Message = "'parameter modifiers' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Property_declarations_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8014, Category = DiagnosticCategory.Error, Key = "property_declarations_can_only_be_used_in_a_ts_file_8014", Message = "'property declarations' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Enum_declarations_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8015, Category = DiagnosticCategory.Error, Key = "enum_declarations_can_only_be_used_in_a_ts_file_8015", Message = "'enum declarations' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Type_assertion_expressions_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8016, Category = DiagnosticCategory.Error, Key = "type_assertion_expressions_can_only_be_used_in_a_ts_file_8016", Message = "'type assertion expressions' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Decorators_can_only_be_used_in_a_ts_file = new DiagnosticMessage { Code = 8017, Category = DiagnosticCategory.Error, Key = "decorators_can_only_be_used_in_a_ts_file_8017", Message = "'decorators' can only be used in a .ts file." };
        public static readonly IDiagnosticMessage Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_class_extends_clauses = new DiagnosticMessage { Code = 9002, Category = DiagnosticCategory.Error, Key = "Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_clas_9002", Message = "Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clauses." };
        public static readonly IDiagnosticMessage Class_expressions_are_not_currently_supported = new DiagnosticMessage { Code = 9003, Category = DiagnosticCategory.Error, Key = "class_expressions_are_not_currently_supported_9003", Message = "'class' expressions are not currently supported." };
        public static readonly IDiagnosticMessage JSX_attributes_must_only_be_assigned_a_non_empty_expression = new DiagnosticMessage { Code = 17000, Category = DiagnosticCategory.Error, Key = "JSX_attributes_must_only_be_assigned_a_non_empty_expression_17000", Message = "JSX attributes must only be assigned a non-empty 'expression'." };
        public static readonly IDiagnosticMessage JSX_elements_cannot_have_multiple_attributes_with_the_same_name = new DiagnosticMessage { Code = 17001, Category = DiagnosticCategory.Error, Key = "JSX_elements_cannot_have_multiple_attributes_with_the_same_name_17001", Message = "JSX elements cannot have multiple attributes with the same name." };
        public static readonly IDiagnosticMessage Expected_corresponding_JSX_closing_tag_for_0 = new DiagnosticMessage { Code = 17002, Category = DiagnosticCategory.Error, Key = "Expected_corresponding_JSX_closing_tag_for_0_17002", Message = "Expected corresponding JSX closing tag for '{0}'." };
        public static readonly IDiagnosticMessage JSX_attribute_expected = new DiagnosticMessage { Code = 17003, Category = DiagnosticCategory.Error, Key = "JSX_attribute_expected_17003", Message = "JSX attribute expected." };
        public static readonly IDiagnosticMessage Cannot_use_JSX_unless_the_jsx_flag_is_provided = new DiagnosticMessage { Code = 17004, Category = DiagnosticCategory.Error, Key = "Cannot_use_JSX_unless_the_jsx_flag_is_provided_17004", Message = "Cannot use JSX unless the '--jsx' flag is provided." };
        public static readonly IDiagnosticMessage A_constructor_cannot_contain_a_super_call_when_its_class_extends_null = new DiagnosticMessage { Code = 17005, Category = DiagnosticCategory.Error, Key = "A_constructor_cannot_contain_a_super_call_when_its_class_extends_null_17005", Message = "A constructor cannot contain a 'super' call when its class extends 'null'" };
        public static readonly IDiagnosticMessage An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses = new DiagnosticMessage { Code = 17006, Category = DiagnosticCategory.Error, Key = "An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006", Message = "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses." };
        public static readonly IDiagnosticMessage A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses = new DiagnosticMessage { Code = 17007, Category = DiagnosticCategory.Error, Key = "A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007", Message = "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses." };

        // Custom DScript specific diagnostics
        public static readonly IDiagnosticMessage Unknown_Module_Specifier_Kind = new DiagnosticMessage { Code = 18001, Category = DiagnosticCategory.Error, Key = "Unknown_Module_Kind", Message = "Unknown module specifier kind '{0}'. Module specifier should be file relative ('./fileName'), package-relative ('/fileName') or package name ('name')." };
        public static readonly IDiagnosticMessage var_declarations_are_prohibited_in_DScript_Use_let_or_const_instead = new DiagnosticMessage { Code = 50001, Category = DiagnosticCategory.Error, Key = "var_declarations_are_prohibited_in_DScript_Use_let_or_const_instead_50001", Message = "var declarations are prohibited in DScript. Use 'let' or 'const' instead." };
        public static readonly IDiagnosticMessage Failed_to_locate_package_0_at_SDK_path_1_Check_SDK_path_at_config_dsc_or_package_name = new DiagnosticMessage { Code = 50101, Category = DiagnosticCategory.Error, Key = "Failed_to_locate_package_0_at_SDK_path_1_Check_SDK_path_at_config_dsc_or_package_name_50101", Message = "Failed to locate package '{0}' at SDK path '{1}'. Check SDK path at config.dsc or package name." };
        public static readonly IDiagnosticMessage Failed_to_locate_package_0_Consider_adding_Source_Resolver_to_config_dsc = new DiagnosticMessage { Code = 50102, Category = DiagnosticCategory.Error, Key = "Failed_to_locate_package_0_Consider_adding_Source_Resolver_to_config_dsc_50102", Message = "Failed to locate package '{0}'. Consider adding Source Resolver to config.dsc." };
        public static readonly IDiagnosticMessage Unknown_package_reference_type_DScript_supports_relative_paths_Pack_Slash_config_relative_paths_SlashPack_and_substitutable_paths_Slash_SlashPack = new DiagnosticMessage { Code = 50103, Category = DiagnosticCategory.Error, Key = "Unknown_package_reference_type_DScript_supports_relative_paths_Pack_Slash_config_relative_paths_50103", Message = "Unknown package reference type. DScript supports relative paths ('Pack/'), config relative paths ('/Pack') and substitutable paths ('//Pack')." };
        public static readonly IDiagnosticMessage Cannot_find_package_at_0 = new DiagnosticMessage { Code = 50104, Category = DiagnosticCategory.Error, Key = "Cannot_find_package_at_0_50104", Message = "Cannot find package at '{0}'." };
        public static readonly IDiagnosticMessage Cannot_locate_substitutable_package_0_config_dsc_does_not_have_SourceResolvers = new DiagnosticMessage { Code = 50107, Category = DiagnosticCategory.Error, Key = "Cannot_locate_substitutable_package_0_config_dsc_does_not_have_SourceResolvers_50107", Message = "Cannot locate substitutable package '{0}'. config.dsc does not have SourceResolvers." };
        public static readonly IDiagnosticMessage Cannot_locate_substitutable_package_0_at_following_locations_1 = new DiagnosticMessage { Code = 50108, Category = DiagnosticCategory.Error, Key = "Cannot_locate_substitutable_package_0_at_following_locations_1_50108", Message = "Cannot locate substitutable package '{0}' at following locations '{1}'." };
        public static readonly IDiagnosticMessage Cannot_find_package_0_at_the_source_root_1 = new DiagnosticMessage { Code = 50109, Category = DiagnosticCategory.Error, Key = "Cannot_find_package_0_at_the_source_root_1_50109", Message = "Cannot find package '{0}' at the source root '{1}'." };
        public static readonly IDiagnosticMessage Cannot_locate_package_0_Known_packages_as_specified_in_1_Colon_2 = new DiagnosticMessage { Code = 50110, Category = DiagnosticCategory.Error, Key = "Cannot_locate_package_0_Known_packages_as_specified_in_1_Colon_2_50110", Message = "Cannot locate package '{0}'. Known packages (as specified in '{1}')= '{2}'." };
        public static readonly IDiagnosticMessage Cannot_locate_package_0_at_following_locations_Colon_1_Known_packages_are_Colon_2 = new DiagnosticMessage { Code = 50111, Category = DiagnosticCategory.Error, Key = "Cannot_locate_package_0_at_following_locations_Colon_1_Known_packages_are_Colon_2_50111", Message = "Cannot locate package '{0}' at following locations= '{1}'. Known packages are= '{2}'." };

        // public static readonly IDiagnosticMessage Cannot_find_package_at_0 = new DiagnosticMessage { Code = 50109, Category = DiagnosticCategory.Error, Key = "Cannot_find_package_at_0", Message = "Cannot find package at '{0}'." };
        public static readonly IDiagnosticMessage Public_declarations_are_only_allowed_in_modules_with_implicit_reference_semantics = new DiagnosticMessage { Code = 50112, Category = DiagnosticCategory.Error, Key = "Public_declarations_are_only_allowed_in_modules_with_implicit_reference_semantics_50112", Message = "Public declarations are only allowed in modules with implicit project reference semantics." };
        public static readonly IDiagnosticMessage Only_top_level_declarations_can_be_made_public = new DiagnosticMessage { Code = 50113, Category = DiagnosticCategory.Error, Key = "Only_top_level_declarations_can_be_made_public_50113", Message = "Only top-level declarations can be made public." };
        public static readonly IDiagnosticMessage Public_declarations_have_to_be_exported = new DiagnosticMessage { Code = 50114, Category = DiagnosticCategory.Error, Key = "Public_declarations_have_to_be_exported_50114", Message = "Public declarations have to be exported." };
        public static readonly IDiagnosticMessage A_public_decorator_is_not_allowed_here = new DiagnosticMessage { Code = 50115, Category = DiagnosticCategory.Error, Key = "A_public_decorator_is_not_allowed_here_50115", Message = "A public decorator is not allowed here." };
        public static readonly IDiagnosticMessage Individual_exported_declarations_in_merged_declaration_0_must_be_all_public_or_all_non_public = new DiagnosticMessage { Code = 50116, Category = DiagnosticCategory.Error, Key = "Individual_exported_declarations_in_merged_declaration_0_must_be_all_public_or_all_non_public_50116", Message = "Individual exported declarations in merged declaration '{0}' must be all public or all non-public." };
        public static readonly IDiagnosticMessage Module_0_has_no_public_member_1 = new DiagnosticMessage { Code = 50117, Category = DiagnosticCategory.Error, Key = "Module_0_has_no_public_member_1_50117", Message = "Module '{0}' has no public member '{1}'." };
        public static readonly IDiagnosticMessage The_root_namespace_can_only_be_referenced_as_0_Namespace_qualifications_are_not_allowed = new DiagnosticMessage { Code = 50118, Category = DiagnosticCategory.Error, Key = "The_root_namespace_can_only_be_referenced_as_0_Namespace_qualifications_are_not_allowed_50118", Message = "The root namespace can only be referenced as '{0}'. Namespace qualifications are not allowed." };
        public static readonly IDiagnosticMessage Importing_module_0_from_1_is_not_allowed_by_allowedDependencies_policy_in_module_1_located_at_2 = new DiagnosticMessage { Code = 50119, Category = DiagnosticCategory.Error, Key = "Importing_module_0_from_1_is_not_allowed_by_allowedDependencies_policy_in_module_1_located_at_2", Message = "Importing module '{0}' from '{1}' is not allowed by 'allowedDependencies' policy specified in module '{1}' located at '{2}'." };
        public static readonly IDiagnosticMessage Const_enum_member_initializer_was_evaluated_to_a_non_integer_value = new DiagnosticMessage { Code = 50120, Category = DiagnosticCategory.Error, Key = "Const_enum_member_initializer_was_evaluated_to_a_non_integer_value", Message = "'const' enum member initializer was evaluated to a number outside of the integer bounds." };
#pragma warning restore SA1310 // Field names must not contain underscore
#pragma warning restore SA1307 // Field name must begin with upper-case letter
#pragma warning restore SA1600 // Elements must be documented
    }
}
